# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"An object with an ID"
interface GraphCMS_Node {
    "The id of the object."
    id: ID!
    "The Stage of an object"
    stage: GraphCMS_Stage!
}

"Node Interface"
interface Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

union GraphCMS_SeoParent = GraphCMS_Page | GraphCMS_Post

type Directory implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type DirectoryConnection {
    distinct(field: DirectoryFieldsEnum!): [String!]!
    edges: [DirectoryEdge!]!
    group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type DirectoryEdge {
    next: Directory
    node: Directory!
    previous: Directory
}

type DirectoryGroupConnection {
    edges: [DirectoryEdge!]!
    field: String!
    fieldValue: String
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type File implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    "Returns the first child node of type ImageSharp or null if there are no children of given type on this node"
    childImageSharp: ImageSharp
    children: [Node!]!
    "Returns all children nodes filtered by type ImageSharp"
    childrenImageSharp: [ImageSharp]
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    "Copy file to static directory and return public url to it"
    publicURL: String
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type FileConnection {
    distinct(field: FileFieldsEnum!): [String!]!
    edges: [FileEdge!]!
    group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FileEdge {
    next: File
    node: File!
    previous: File
}

type FileGroupConnection {
    edges: [FileEdge!]!
    field: String!
    fieldValue: String
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphCMS {
    "Retrieve a single asset"
    asset(
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_AssetWhereUniqueInput!
    ): GraphCMS_Asset
    "Retrieve document version"
    assetVersion(where: GraphCMS_VersionWhereInput!): GraphCMS_DocumentVersion
    "Retrieve multiple assets"
    assets(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_AssetOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_AssetWhereInput
    ): [GraphCMS_Asset!]!
    "Retrieve multiple assets using the Relay connection interface"
    assetsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_AssetOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_AssetWhereInput
    ): GraphCMS_AssetConnection!
    "Retrieve a single author"
    author(
        """

        Defines which locales should be returned.

        Note that `Author` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_AuthorWhereUniqueInput!
    ): GraphCMS_Author
    "Retrieve document version"
    authorVersion(where: GraphCMS_VersionWhereInput!): GraphCMS_DocumentVersion
    "Retrieve multiple authors"
    authors(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Author` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_AuthorOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_AuthorWhereInput
    ): [GraphCMS_Author!]!
    "Retrieve multiple authors using the Relay connection interface"
    authorsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Author` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_AuthorOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_AuthorWhereInput
    ): GraphCMS_AuthorConnection!
    "Retrieve a single member"
    member(
        """

        Defines which locales should be returned.

        Note that `Member` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_MemberWhereUniqueInput!
    ): GraphCMS_Member
    "Retrieve document version"
    memberVersion(where: GraphCMS_VersionWhereInput!): GraphCMS_DocumentVersion
    "Retrieve multiple members"
    members(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Member` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_MemberOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_MemberWhereInput
    ): [GraphCMS_Member!]!
    "Retrieve multiple members using the Relay connection interface"
    membersConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Member` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_MemberOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_MemberWhereInput
    ): GraphCMS_MemberConnection!
    "Fetches an object given its ID"
    node(
        "The ID of an object"
        id: ID!,
        """

        Defines which locales should be returned.

        Note that `Node` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        stage: GraphCMS_Stage! = PUBLISHED
    ): GraphCMS_Node
    "Retrieve a single page"
    page(
        """

        Defines which locales should be returned.

        Note that `Page` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_PageWhereUniqueInput!
    ): GraphCMS_Page
    "Retrieve document version"
    pageVersion(where: GraphCMS_VersionWhereInput!): GraphCMS_DocumentVersion
    "Retrieve multiple pages"
    pages(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Page` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_PageOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_PageWhereInput
    ): [GraphCMS_Page!]!
    "Retrieve multiple pages using the Relay connection interface"
    pagesConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Page` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_PageOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_PageWhereInput
    ): GraphCMS_PageConnection!
    "Retrieve a single post"
    post(
        """

        Defines which locales should be returned.

        Note that `Post` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_PostWhereUniqueInput!
    ): GraphCMS_Post
    "Retrieve document version"
    postVersion(where: GraphCMS_VersionWhereInput!): GraphCMS_DocumentVersion
    "Retrieve multiple posts"
    posts(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Post` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_PostOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_PostWhereInput
    ): [GraphCMS_Post!]!
    "Retrieve multiple posts using the Relay connection interface"
    postsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Post` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_PostOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_PostWhereInput
    ): GraphCMS_PostConnection!
    "Retrieve a single product"
    product(
        """

        Defines which locales should be returned.

        Note that `Product` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_ProductWhereUniqueInput!
    ): GraphCMS_Product
    "Retrieve document version"
    productVersion(where: GraphCMS_VersionWhereInput!): GraphCMS_DocumentVersion
    "Retrieve multiple products"
    products(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Product` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_ProductOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_ProductWhereInput
    ): [GraphCMS_Product!]!
    "Retrieve multiple products using the Relay connection interface"
    productsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Product` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_ProductOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_ProductWhereInput
    ): GraphCMS_ProductConnection!
    "Retrieve a single seo"
    seo(
        """

        Defines which locales should be returned.

        Note that `Seo` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_SeoWhereUniqueInput!
    ): GraphCMS_Seo
    "Retrieve document version"
    seoVersion(where: GraphCMS_VersionWhereInput!): GraphCMS_DocumentVersion
    "Retrieve multiple seos"
    seos(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Seo` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_SeoOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_SeoWhereInput
    ): [GraphCMS_Seo!]!
    "Retrieve multiple seos using the Relay connection interface"
    seosConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Seo` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_SeoOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_SeoWhereInput
    ): GraphCMS_SeoConnection!
    "Retrieve a single user"
    user(
        """

        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_UserWhereUniqueInput!
    ): GraphCMS_User
    "Retrieve multiple users"
    users(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_UserOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_UserWhereInput
    ): [GraphCMS_User!]!
    "Retrieve multiple users using the Relay connection interface"
    usersConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [GraphCMS_Locale!]! = [en],
        orderBy: GraphCMS_UserOrderByInput,
        skip: Int,
        stage: GraphCMS_Stage! = PUBLISHED,
        where: GraphCMS_UserWhereInput
    ): GraphCMS_UserConnection!
}

type GraphCMS_Aggregate {
    count: Int!
}

"Asset system model"
type GraphCMS_Asset implements GraphCMS_Node {
    authorAvatar(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `authorAvatar` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!],
        orderBy: GraphCMS_AuthorOrderByInput,
        skip: Int,
        where: GraphCMS_AuthorWhereInput
    ): [GraphCMS_Author!]!
    coverImagePost(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `coverImagePost` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!],
        orderBy: GraphCMS_PostOrderByInput,
        skip: Int,
        where: GraphCMS_PostWhereInput
    ): [GraphCMS_Post!]!
    "The time the document was created"
    createdAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: GraphCMS_SystemDateTimeFieldVariation! = COMBINED
    ): GraphCMS_DateTime!
    "User that created this document"
    createdBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [GraphCMS_Stage!]! = [PUBLISHED, DRAFT]
    ): [GraphCMS_Asset!]!
    "The file name"
    fileName: String!
    "The file handle"
    handle: String!
    "The height of the file"
    height: Float
    "List of Asset versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: GraphCMS_Stage
    ): [GraphCMS_Version!]!
    "The unique identifier"
    id: ID!
    imageProduct(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `imageProduct` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!],
        orderBy: GraphCMS_ProductOrderByInput,
        skip: Int,
        where: GraphCMS_ProductWhereInput
    ): [GraphCMS_Product!]!
    "System Locale field"
    locale: GraphCMS_Locale!
    "Get the other localizations for this document"
    localizations(
        "Decides if the current locale should be included or not"
        includeCurrent: Boolean! = false,
        "Potential locales that should be returned"
        locales: [GraphCMS_Locale!]! = [en]
    ): [GraphCMS_Asset!]!
    "The mime type of the file"
    mimeType: String
    "The time the document was published. Null on documents in draft stage."
    publishedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: GraphCMS_SystemDateTimeFieldVariation! = COMBINED
    ): GraphCMS_DateTime
    "User that last published this document"
    publishedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    seoImage(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `seoImage` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!],
        orderBy: GraphCMS_SeoOrderByInput,
        skip: Int,
        where: GraphCMS_SeoWhereInput
    ): [GraphCMS_Seo!]!
    "The file size"
    size: Float
    "System stage field"
    stage: GraphCMS_Stage!
    "The time the document was updated"
    updatedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: GraphCMS_SystemDateTimeFieldVariation! = COMBINED
    ): GraphCMS_DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "Get the url for the asset with provided transformations applied."
    url(transformation: GraphCMS_AssetTransformationInput): String!
    "The file width"
    width: Float
}

"A connection to a list of items."
type GraphCMS_AssetConnection {
    aggregate: GraphCMS_Aggregate!
    "A list of edges."
    edges: [GraphCMS_AssetEdge!]!
    "Information to aid in pagination."
    pageInfo: GraphCMS_PageInfo!
}

"An edge in a connection."
type GraphCMS_AssetEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GraphCMS_Asset!
}

type GraphCMS_Author implements GraphCMS_Node {
    "Enter a short bio about yourself, or other authors."
    biography: String
    "The time the document was created"
    createdAt: GraphCMS_DateTime!
    "User that created this document"
    createdBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [GraphCMS_Stage!]! = [PUBLISHED, DRAFT]
    ): [GraphCMS_Author!]!
    "List of Author versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: GraphCMS_Stage
    ): [GraphCMS_Version!]!
    "The unique identifier"
    id: ID!
    "Enter the display name for authors"
    name: String!
    "Add a profile picture for authors"
    picture(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `picture` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_Asset
    "Connect blog posts to this author"
    posts(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `posts` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!],
        orderBy: GraphCMS_PostOrderByInput,
        skip: Int,
        where: GraphCMS_PostWhereInput
    ): [GraphCMS_Post!]!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: GraphCMS_DateTime
    "User that last published this document"
    publishedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "System stage field"
    stage: GraphCMS_Stage!
    "Enter the job title of the author"
    title: String
    "The time the document was updated"
    updatedAt: GraphCMS_DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
}

"A connection to a list of items."
type GraphCMS_AuthorConnection {
    aggregate: GraphCMS_Aggregate!
    "A list of edges."
    edges: [GraphCMS_AuthorEdge!]!
    "Information to aid in pagination."
    pageInfo: GraphCMS_PageInfo!
}

"An edge in a connection."
type GraphCMS_AuthorEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GraphCMS_Author!
}

type GraphCMS_BatchPayload {
    "The number of nodes that have been affected by the Batch operation."
    count: GraphCMS_Long!
}

"Representing a color value comprising of HEX, RGBA and css color values"
type GraphCMS_Color {
    css: String!
    hex: GraphCMS_Hex!
    rgba: GraphCMS_RGBA!
}

type GraphCMS_DocumentVersion {
    createdAt: GraphCMS_DateTime!
    data: GraphCMS_Json
    id: ID!
    revision: Int!
    stage: GraphCMS_Stage!
}

"Representing a geolocation point with latitude and longitude"
type GraphCMS_Location {
    distance(from: GraphCMS_LocationInput!): Float!
    latitude: Float!
    longitude: Float!
}

type GraphCMS_Member implements GraphCMS_Node {
    birthday: GraphCMS_Date
    "The time the document was created"
    createdAt: GraphCMS_DateTime!
    "User that created this document"
    createdBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    description: String
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [GraphCMS_Stage!]! = [PUBLISHED, DRAFT]
    ): [GraphCMS_Member!]!
    githubAccount: String
    "List of Member versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: GraphCMS_Stage
    ): [GraphCMS_Version!]!
    "The unique identifier"
    id: ID!
    name: String!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: GraphCMS_DateTime
    "User that last published this document"
    publishedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "System stage field"
    stage: GraphCMS_Stage!
    technicalFields: String
    twitterAccount: String
    "The time the document was updated"
    updatedAt: GraphCMS_DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
}

"A connection to a list of items."
type GraphCMS_MemberConnection {
    aggregate: GraphCMS_Aggregate!
    "A list of edges."
    edges: [GraphCMS_MemberEdge!]!
    "Information to aid in pagination."
    pageInfo: GraphCMS_PageInfo!
}

"An edge in a connection."
type GraphCMS_MemberEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GraphCMS_Member!
}

type GraphCMS_Page implements GraphCMS_Node {
    "Enter the content for this page. The content uses the rich-text editor, giving you a better visual representation."
    content: GraphCMS_RichText!
    "The time the document was created"
    createdAt: GraphCMS_DateTime!
    "User that created this document"
    createdBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [GraphCMS_Stage!]! = [PUBLISHED, DRAFT]
    ): [GraphCMS_Page!]!
    "List of Page versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: GraphCMS_Stage
    ): [GraphCMS_Version!]!
    "The unique identifier"
    id: ID!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: GraphCMS_DateTime
    "User that last published this document"
    publishedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "Relate an SEO model to this page"
    seo(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `seo` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_Seo
    "Enter the slug for this page, such as about, blog, or contact"
    slug: String!
    "System stage field"
    stage: GraphCMS_Stage!
    "Enter a short description to be used as a subtitle"
    subtitle: String
    "What is the title of your page?"
    title: String!
    "The time the document was updated"
    updatedAt: GraphCMS_DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
}

"A connection to a list of items."
type GraphCMS_PageConnection {
    aggregate: GraphCMS_Aggregate!
    "A list of edges."
    edges: [GraphCMS_PageEdge!]!
    "Information to aid in pagination."
    pageInfo: GraphCMS_PageInfo!
}

"An edge in a connection."
type GraphCMS_PageEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GraphCMS_Page!
}

"Information about pagination in a connection."
type GraphCMS_PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "Number of items in the current page."
    pageSize: Int
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type GraphCMS_Post implements GraphCMS_Node {
    "Who should be credited with writing this post?"
    author(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `author` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_Author
    "Write your blog post!"
    content: GraphCMS_RichText!
    "Upload or select a cover image to set as your Featured Image"
    coverImage(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `coverImage` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_Asset
    "The time the document was created"
    createdAt: GraphCMS_DateTime!
    "User that created this document"
    createdBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "What is the published date you would like to show for this post?"
    date: GraphCMS_Date!
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [GraphCMS_Stage!]! = [PUBLISHED, DRAFT]
    ): [GraphCMS_Post!]!
    "Add a short excerpt to summarize this post"
    excerpt: String
    "List of Post versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: GraphCMS_Stage
    ): [GraphCMS_Version!]!
    "The unique identifier"
    id: ID!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: GraphCMS_DateTime
    "User that last published this document"
    publishedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "Attach an SEO model to this post"
    seo(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `seo` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_Seo
    "Select a slug for this blog post, such as post-1, post-2, etc."
    slug: String!
    "System stage field"
    stage: GraphCMS_Stage!
    "Add any relevant tags to this blog post"
    tags: [String!]!
    "Name your blog post!"
    title: String!
    "The time the document was updated"
    updatedAt: GraphCMS_DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
}

"A connection to a list of items."
type GraphCMS_PostConnection {
    aggregate: GraphCMS_Aggregate!
    "A list of edges."
    edges: [GraphCMS_PostEdge!]!
    "Information to aid in pagination."
    pageInfo: GraphCMS_PageInfo!
}

"An edge in a connection."
type GraphCMS_PostEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GraphCMS_Post!
}

type GraphCMS_Product implements GraphCMS_Node {
    "The time the document was created"
    createdAt: GraphCMS_DateTime!
    "User that created this document"
    createdBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    description: String
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [GraphCMS_Stage!]! = [PUBLISHED, DRAFT]
    ): [GraphCMS_Product!]!
    "List of Product versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: GraphCMS_Stage
    ): [GraphCMS_Version!]!
    "The unique identifier"
    id: ID!
    image(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `image` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_Asset
    name: String!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: GraphCMS_DateTime
    "User that last published this document"
    publishedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "System stage field"
    stage: GraphCMS_Stage!
    "The time the document was updated"
    updatedAt: GraphCMS_DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    url: String
}

"A connection to a list of items."
type GraphCMS_ProductConnection {
    aggregate: GraphCMS_Aggregate!
    "A list of edges."
    edges: [GraphCMS_ProductEdge!]!
    "Information to aid in pagination."
    pageInfo: GraphCMS_PageInfo!
}

"An edge in a connection."
type GraphCMS_ProductEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GraphCMS_Product!
}

"Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()"
type GraphCMS_RGBA {
    a: GraphCMS_RGBATransparency!
    b: GraphCMS_RGBAHue!
    g: GraphCMS_RGBAHue!
    r: GraphCMS_RGBAHue!
}

"Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values"
type GraphCMS_RichText {
    "Returns HTMl representation"
    html: String!
    "Returns Markdown representation"
    markdown: String!
    "Returns AST representation"
    raw: GraphCMS_RichTextAST!
    "Returns plain-text contents of RichText"
    text: String!
}

type GraphCMS_Seo implements GraphCMS_Node {
    "The time the document was created"
    createdAt: GraphCMS_DateTime!
    "User that created this document"
    createdBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "Create a custom meta description"
    description: String
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [GraphCMS_Stage!]! = [PUBLISHED, DRAFT]
    ): [GraphCMS_Seo!]!
    "List of Seo versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: GraphCMS_Stage
    ): [GraphCMS_Version!]!
    "The unique identifier"
    id: ID!
    "Select a custom OG image (the most common size is usually 1280x720)"
    image(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `image` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_Asset
    "Select your focus keywords"
    keywords: [String!]!
    "What pages and blog posts would this SEO apply to?"
    parent(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `parent` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_SeoParent
    "The time the document was published. Null on documents in draft stage."
    publishedAt: GraphCMS_DateTime
    "User that last published this document"
    publishedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
    "System stage field"
    stage: GraphCMS_Stage!
    "Create a custom meta title"
    title: String
    "The time the document was updated"
    updatedAt: GraphCMS_DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [GraphCMS_Locale!]
    ): GraphCMS_User
}

"A connection to a list of items."
type GraphCMS_SeoConnection {
    aggregate: GraphCMS_Aggregate!
    "A list of edges."
    edges: [GraphCMS_SeoEdge!]!
    "Information to aid in pagination."
    pageInfo: GraphCMS_PageInfo!
}

"An edge in a connection."
type GraphCMS_SeoEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GraphCMS_Seo!
}

"User system model"
type GraphCMS_User implements GraphCMS_Node {
    "The time the document was created"
    createdAt: GraphCMS_DateTime!
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [GraphCMS_Stage!]! = [PUBLISHED, DRAFT]
    ): [GraphCMS_User!]!
    "The unique identifier"
    id: ID!
    "Flag to determine if user is active or not"
    isActive: Boolean!
    "User Kind. Can be either MEMBER, PAT or PUBLIC"
    kind: GraphCMS_UserKind!
    "The username"
    name: String!
    "Profile Picture url"
    picture: String
    "The time the document was published. Null on documents in draft stage."
    publishedAt: GraphCMS_DateTime
    "System stage field"
    stage: GraphCMS_Stage!
    "The time the document was updated"
    updatedAt: GraphCMS_DateTime!
}

"A connection to a list of items."
type GraphCMS_UserConnection {
    aggregate: GraphCMS_Aggregate!
    "A list of edges."
    edges: [GraphCMS_UserEdge!]!
    "Information to aid in pagination."
    pageInfo: GraphCMS_PageInfo!
}

"An edge in a connection."
type GraphCMS_UserEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GraphCMS_User!
}

type GraphCMS_Version {
    createdAt: GraphCMS_DateTime!
    id: ID!
    revision: Int!
    stage: GraphCMS_Stage!
}

type GraphQLSource implements Node {
    children: [Node!]!
    fieldName: String
    id: ID!
    internal: Internal!
    parent: Node
    typeName: String
}

type GraphQLSourceConnection {
    distinct(field: GraphQLSourceFieldsEnum!): [String!]!
    edges: [GraphQLSourceEdge!]!
    group(field: GraphQLSourceFieldsEnum!, limit: Int, skip: Int): [GraphQLSourceGroupConnection!]!
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphQLSourceEdge {
    next: GraphQLSource
    node: GraphQLSource!
    previous: GraphQLSource
}

type GraphQLSourceGroupConnection {
    edges: [GraphQLSourceEdge!]!
    field: String!
    fieldValue: String
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharp implements Node {
    children: [Node!]!
    fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpFixed
    fluid(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = AUTO,
        toFormatBase64: ImageFormat = AUTO,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Options to pass to sharp when generating AVIF images."
        avifOptions: AVIFOptions,
        "Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        "Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this"
        blurredOptions: BlurredOptions,
        """

        Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        """

        The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
        The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
        not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
        both PNG and JPG is not supported and will be ignored.
        """
        formats: [ImageFormat],
        """

        The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
        The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
        matching the aspect ratio of the source image.
        """
        height: Int,
        "Options to pass to sharp when generating JPG images."
        jpgOptions: JPGOptions,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: ImageLayout = CONSTRAINED,
        """

        A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
        and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        TRACED_SVG: a low-resolution traced SVG of the image.
        NONE: no placeholder. Set "background" to use a fixed background color.
        """
        placeholder: ImagePlaceholder,
        "Options to pass to sharp when generating PNG images."
        pngOptions: PNGOptions,
        "The default quality. This is overridden by any format-specific options"
        quality: Int,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download.
        You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
        does not actually span the full width of the screen, in which case you should pass the correct size here.
        """
        sizes: String,
        "Options for traced placeholder SVGs. You also should set placeholder to \"TRACED_SVG\"."
        tracedSVGOptions: Potrace,
        "Options to pass to sharp to control cropping and other image manipulations."
        transformOptions: TransformOptions,
        "Options to pass to sharp when generating WebP images."
        webpOptions: WebPOptions,
        """

        The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
        Ignored if layout = FLUID.
        """
        width: Int
    ): JSON!
    id: ID!
    internal: Internal!
    original: ImageSharpOriginal
    parent: Node
    resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
    distinct(field: ImageSharpFieldsEnum!): [String!]!
    edges: [ImageSharpEdge!]!
    group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpEdge {
    next: ImageSharp
    node: ImageSharp!
    previous: ImageSharp
}

type ImageSharpFixed {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpFluid {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type ImageSharpGroupConnection {
    edges: [ImageSharpEdge!]!
    field: String!
    fieldValue: String
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpOriginal {
    height: Float
    src: String
    width: Float
}

type ImageSharpResize {
    aspectRatio: Float
    height: Int
    originalName: String
    src: String
    tracedSVG: String
    width: Int
}

type Internal {
    content: String
    contentDigest: String!
    description: String
    fieldOwners: [String]
    ignoreType: Boolean
    mediaType: String
    owner: String!
    type: String!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    itemCount: Int!
    pageCount: Int!
    perPage: Int
    totalCount: Int!
}

type Query {
    allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
    allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
    allGraphQlSource(filter: GraphQLSourceFilterInput, limit: Int, skip: Int, sort: GraphQLSourceSortInput): GraphQLSourceConnection!
    allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection!
    allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
    allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
    allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
    allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection!
    allThemeUiConfig(filter: ThemeUiConfigFilterInput, limit: Int, skip: Int, sort: ThemeUiConfigSortInput): ThemeUiConfigConnection!
    directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
    file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
    gcms: GraphCMS!
    graphQlSource(children: NodeFilterListInput, fieldName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, typeName: StringQueryOperatorInput): GraphQLSource
    imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: JSONQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
    site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput): Site
    siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
    sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, componentPath: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, matchPath: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput): SitePage
    sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
    themeUiConfig(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, preset: JSONQueryOperatorInput, prismPreset: JSONQueryOperatorInput): ThemeUiConfig
}

type Site implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    host: String
    id: ID!
    internal: Internal!
    parent: Node
    pathPrefix: String
    polyfill: Boolean
    port: Int
    siteMetadata: SiteSiteMetadata
}

type SiteBuildMetadata implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type SiteBuildMetadataConnection {
    distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
    edges: [SiteBuildMetadataEdge!]!
    group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteBuildMetadataEdge {
    next: SiteBuildMetadata
    node: SiteBuildMetadata!
    previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
    edges: [SiteBuildMetadataEdge!]!
    field: String!
    fieldValue: String
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteConnection {
    distinct(field: SiteFieldsEnum!): [String!]!
    edges: [SiteEdge!]!
    group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteEdge {
    next: Site
    node: Site!
    previous: Site
}

type SiteGroupConnection {
    edges: [SiteEdge!]!
    field: String!
    fieldValue: String
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePage implements Node {
    children: [Node!]!
    component: String!
    componentChunkName: String!
    componentPath: String
    id: ID!
    internal: Internal!
    internalComponentName: String!
    isCreatedByStatefulCreatePages: Boolean
    matchPath: String
    parent: Node
    path: String!
    pluginCreator: SitePlugin
    pluginCreatorId: String
}

type SitePageConnection {
    distinct(field: SitePageFieldsEnum!): [String!]!
    edges: [SitePageEdge!]!
    group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePageEdge {
    next: SitePage
    node: SitePage!
    previous: SitePage
}

type SitePageGroupConnection {
    edges: [SitePageEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePlugin implements Node {
    browserAPIs: [String]
    children: [Node!]!
    id: ID!
    internal: Internal!
    name: String
    nodeAPIs: [String]
    packageJson: SitePluginPackageJson
    parent: Node
    pluginFilepath: String
    pluginOptions: SitePluginPluginOptions
    resolve: String
    ssrAPIs: [String]
    version: String
}

type SitePluginConnection {
    distinct(field: SitePluginFieldsEnum!): [String!]!
    edges: [SitePluginEdge!]!
    group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginEdge {
    next: SitePlugin
    node: SitePlugin!
    previous: SitePlugin
}

type SitePluginGroupConnection {
    edges: [SitePluginEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginPackageJson {
    author: String
    dependencies: [SitePluginPackageJsonDependencies]
    description: String
    devDependencies: [SitePluginPackageJsonDevDependencies]
    keywords: [String]
    license: String
    main: String
    name: String
    peerDependencies: [SitePluginPackageJsonPeerDependencies]
    version: String
}

type SitePluginPackageJsonDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonDevDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonPeerDependencies {
    name: String
    version: String
}

type SitePluginPluginOptions {
    allExtensions: Boolean
    background_color: String
    base64Width: Int
    cacheDigest: String
    cache_busting_mode: String
    crossOrigin: String
    defaultQuality: Int
    display: String
    failOnError: Boolean
    fieldName: String
    icon: String
    include_favicon: Boolean
    isTSX: Boolean
    jsxPragma: String
    legacy: Boolean
    name: String
    path: String
    pathCheck: Boolean
    preset: SitePluginPluginOptionsPreset
    short_name: String
    start_url: String
    stripMetadata: Boolean
    theme_color: String
    theme_color_in_head: Boolean
    typeName: String
    url: String
}

type SitePluginPluginOptionsPreset {
    default: SitePluginPluginOptionsPresetDefault
    funk: SitePluginPluginOptionsPresetFunk
}

type SitePluginPluginOptionsPresetDefault {
    colors: SitePluginPluginOptionsPresetDefaultColors
    fontSizes: [Int]
    fontWeights: SitePluginPluginOptionsPresetDefaultFontWeights
    fonts: SitePluginPluginOptionsPresetDefaultFonts
    lineHeights: SitePluginPluginOptionsPresetDefaultLineHeights
    space: [Int]
    styles: SitePluginPluginOptionsPresetDefaultStyles
}

type SitePluginPluginOptionsPresetDefaultColors {
    background: String
    muted: String
    primary: String
    secondary: String
    text: String
}

type SitePluginPluginOptionsPresetDefaultFontWeights {
    body: Int
    bold: Int
    heading: Int
}

type SitePluginPluginOptionsPresetDefaultFonts {
    body: String
    heading: String
    monospace: String
}

type SitePluginPluginOptionsPresetDefaultLineHeights {
    body: Float
    heading: Float
}

type SitePluginPluginOptionsPresetDefaultStyles {
    a: SitePluginPluginOptionsPresetDefaultStylesA
    code: SitePluginPluginOptionsPresetDefaultStylesCode
    h1: SitePluginPluginOptionsPresetDefaultStylesH1
    h2: SitePluginPluginOptionsPresetDefaultStylesH2
    h3: SitePluginPluginOptionsPresetDefaultStylesH3
    h4: SitePluginPluginOptionsPresetDefaultStylesH4
    h5: SitePluginPluginOptionsPresetDefaultStylesH5
    h6: SitePluginPluginOptionsPresetDefaultStylesH6
    img: SitePluginPluginOptionsPresetDefaultStylesImg
    p: SitePluginPluginOptionsPresetDefaultStylesP
    pre: SitePluginPluginOptionsPresetDefaultStylesPre
    root: SitePluginPluginOptionsPresetDefaultStylesRoot
    table: SitePluginPluginOptionsPresetDefaultStylesTable
    td: SitePluginPluginOptionsPresetDefaultStylesTd
    th: SitePluginPluginOptionsPresetDefaultStylesTh
}

type SitePluginPluginOptionsPresetDefaultStylesA {
    color: String
}

type SitePluginPluginOptionsPresetDefaultStylesCode {
    fontFamily: String
    fontSize: String
}

type SitePluginPluginOptionsPresetDefaultStylesH1 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetDefaultStylesH2 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetDefaultStylesH3 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetDefaultStylesH4 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetDefaultStylesH5 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetDefaultStylesH6 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetDefaultStylesImg {
    maxWidth: String
}

type SitePluginPluginOptionsPresetDefaultStylesP {
    color: String
    fontFamily: String
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetDefaultStylesPre {
    code: SitePluginPluginOptionsPresetDefaultStylesPreCode
    fontFamily: String
    overflowX: String
}

type SitePluginPluginOptionsPresetDefaultStylesPreCode {
    color: String
}

type SitePluginPluginOptionsPresetDefaultStylesRoot {
    fontFamily: String
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetDefaultStylesTable {
    borderCollapse: String
    borderSpacing: Int
    width: String
}

type SitePluginPluginOptionsPresetDefaultStylesTd {
    borderBottomStyle: String
    textAlign: String
}

type SitePluginPluginOptionsPresetDefaultStylesTh {
    borderBottomStyle: String
    textAlign: String
}

type SitePluginPluginOptionsPresetFunk {
    colors: SitePluginPluginOptionsPresetFunkColors
    fontSizes: [Int]
    fontWeights: SitePluginPluginOptionsPresetFunkFontWeights
    fonts: SitePluginPluginOptionsPresetFunkFonts
    lineHeights: SitePluginPluginOptionsPresetFunkLineHeights
    space: [Int]
    styles: SitePluginPluginOptionsPresetFunkStyles
}

type SitePluginPluginOptionsPresetFunkColors {
    background: String
    muted: String
    primary: String
    secondary: String
    text: String
}

type SitePluginPluginOptionsPresetFunkFontWeights {
    body: Int
    bold: Int
    heading: Int
}

type SitePluginPluginOptionsPresetFunkFonts {
    body: String
    heading: String
    monospace: String
}

type SitePluginPluginOptionsPresetFunkLineHeights {
    body: Float
    heading: Float
}

type SitePluginPluginOptionsPresetFunkStyles {
    a: SitePluginPluginOptionsPresetFunkStylesA
    code: SitePluginPluginOptionsPresetFunkStylesCode
    h1: SitePluginPluginOptionsPresetFunkStylesH1
    h2: SitePluginPluginOptionsPresetFunkStylesH2
    h3: SitePluginPluginOptionsPresetFunkStylesH3
    h4: SitePluginPluginOptionsPresetFunkStylesH4
    h5: SitePluginPluginOptionsPresetFunkStylesH5
    h6: SitePluginPluginOptionsPresetFunkStylesH6
    img: SitePluginPluginOptionsPresetFunkStylesImg
    p: SitePluginPluginOptionsPresetFunkStylesP
    pre: SitePluginPluginOptionsPresetFunkStylesPre
    root: SitePluginPluginOptionsPresetFunkStylesRoot
    table: SitePluginPluginOptionsPresetFunkStylesTable
    td: SitePluginPluginOptionsPresetFunkStylesTd
    th: SitePluginPluginOptionsPresetFunkStylesTh
}

type SitePluginPluginOptionsPresetFunkStylesA {
    color: String
}

type SitePluginPluginOptionsPresetFunkStylesCode {
    fontFamily: String
    fontSize: String
}

type SitePluginPluginOptionsPresetFunkStylesH1 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetFunkStylesH2 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetFunkStylesH3 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetFunkStylesH4 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetFunkStylesH5 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetFunkStylesH6 {
    color: String
    fontFamily: String
    fontSize: Int
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetFunkStylesImg {
    maxWidth: String
}

type SitePluginPluginOptionsPresetFunkStylesP {
    color: String
    fontFamily: String
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetFunkStylesPre {
    code: SitePluginPluginOptionsPresetFunkStylesPreCode
    fontFamily: String
    overflowX: String
}

type SitePluginPluginOptionsPresetFunkStylesPreCode {
    color: String
}

type SitePluginPluginOptionsPresetFunkStylesRoot {
    fontFamily: String
    fontWeight: String
    lineHeight: String
}

type SitePluginPluginOptionsPresetFunkStylesTable {
    borderCollapse: String
    borderSpacing: Int
    width: String
}

type SitePluginPluginOptionsPresetFunkStylesTd {
    borderBottomStyle: String
    textAlign: String
}

type SitePluginPluginOptionsPresetFunkStylesTh {
    borderBottomStyle: String
    textAlign: String
}

type SiteSiteMetadata {
    author: String
    description: String
    title: String
}

type ThemeUiConfig implements Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
    preset: JSON
    prismPreset: JSON
}

type ThemeUiConfigConnection {
    distinct(field: ThemeUiConfigFieldsEnum!): [String!]!
    edges: [ThemeUiConfigEdge!]!
    group(field: ThemeUiConfigFieldsEnum!, limit: Int, skip: Int): [ThemeUiConfigGroupConnection!]!
    nodes: [ThemeUiConfig!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ThemeUiConfigEdge {
    next: ThemeUiConfig
    node: ThemeUiConfig!
    previous: ThemeUiConfig
}

type ThemeUiConfigGroupConnection {
    edges: [ThemeUiConfigEdge!]!
    field: String!
    fieldValue: String
    nodes: [ThemeUiConfig!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

enum DirectoryFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum FileFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    childImageSharp___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___gatsbyImageData @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children
    childrenImageSharp
    childrenImageSharp___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___gatsbyImageData @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    publicURL
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum GraphCMS_AssetOrderByInput {
    createdAt_ASC
    createdAt_DESC
    fileName_ASC
    fileName_DESC
    handle_ASC
    handle_DESC
    height_ASC
    height_DESC
    id_ASC
    id_DESC
    mimeType_ASC
    mimeType_DESC
    publishedAt_ASC
    publishedAt_DESC
    size_ASC
    size_DESC
    updatedAt_ASC
    updatedAt_DESC
    width_ASC
    width_DESC
}

enum GraphCMS_AuthorOrderByInput {
    biography_ASC
    biography_DESC
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    publishedAt_ASC
    publishedAt_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum GraphCMS_DocumentFileTypes {
    doc
    docx
    html
    jpg
    odp
    ods
    odt
    pdf
    png
    ppt
    pptx
    svg
    txt
    webp
    xls
    xlsx
}

enum GraphCMS_ImageFit {
    "Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio."
    clip
    "Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries."
    crop
    "Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size."
    max
    "Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method."
    scale
}

"Locale system enumeration"
enum GraphCMS_Locale {
    "System locale"
    en
}

enum GraphCMS_MemberOrderByInput {
    birthday_ASC
    birthday_DESC
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    githubAccount_ASC
    githubAccount_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    publishedAt_ASC
    publishedAt_DESC
    technicalFields_ASC
    technicalFields_DESC
    twitterAccount_ASC
    twitterAccount_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum GraphCMS_PageOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    slug_ASC
    slug_DESC
    subtitle_ASC
    subtitle_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum GraphCMS_PostOrderByInput {
    createdAt_ASC
    createdAt_DESC
    date_ASC
    date_DESC
    excerpt_ASC
    excerpt_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    slug_ASC
    slug_DESC
    tags_ASC
    tags_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum GraphCMS_ProductOrderByInput {
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
    url_ASC
    url_DESC
}

enum GraphCMS_SeoOrderByInput {
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    id_ASC
    id_DESC
    keywords_ASC
    keywords_DESC
    publishedAt_ASC
    publishedAt_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"Stage system enumeration"
enum GraphCMS_Stage {
    "The Draft is the default stage for all your content."
    DRAFT
    "The Published stage is where you can publish your content to."
    PUBLISHED
}

enum GraphCMS_SystemDateTimeFieldVariation {
    BASE
    COMBINED
    LOCALIZATION
}

"System User Kind"
enum GraphCMS_UserKind {
    MEMBER
    PAT
    PUBLIC
    WEBHOOK
}

enum GraphCMS_UserOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    isActive_ASC
    isActive_DESC
    kind_ASC
    kind_DESC
    name_ASC
    name_DESC
    picture_ASC
    picture_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum GraphCMS__FilterKind {
    AND
    NOT
    OR
    contains
    contains_all
    contains_none
    contains_some
    ends_with
    eq
    eq_not
    gt
    gte
    in
    lt
    lte
    not_contains
    not_ends_with
    not_in
    not_starts_with
    relational_every
    relational_none
    relational_single
    relational_some
    search
    starts_with
}

enum GraphCMS__MutationInputFieldKind {
    enum
    relation
    richText
    richTextWithEmbeds
    scalar
    union
    virtual
}

enum GraphCMS__MutationKind {
    create
    delete
    deleteMany
    publish
    publishMany
    unpublish
    unpublishMany
    update
    updateMany
    upsert
}

enum GraphCMS__OrderDirection {
    asc
    desc
}

enum GraphCMS__RelationInputCardinality {
    many
    one
}

enum GraphCMS__RelationInputKind {
    create
    update
}

enum GraphCMS__RelationKind {
    regular
    union
}

enum GraphCMS__SystemDateTimeFieldVariation {
    base
    combined
    localization
}

enum GraphQLSourceFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    fieldName
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    typeName
}

enum ImageCropFocus {
    ATTENTION
    CENTER
    EAST
    ENTROPY
    NORTH
    NORTHEAST
    NORTHWEST
    SOUTH
    SOUTHEAST
    SOUTHWEST
    WEST
}

enum ImageFit {
    CONTAIN
    COVER
    FILL
    INSIDE
    OUTSIDE
}

enum ImageFormat {
    AUTO
    AVIF
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum ImageLayout {
    CONSTRAINED
    FIXED
    FULL_WIDTH
}

enum ImagePlaceholder {
    BLURRED
    DOMINANT_COLOR
    NONE
    TRACED_SVG
}

enum ImageSharpFieldsEnum {
    children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    gatsbyImageData @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
}

enum PotraceTurnPolicy {
    TURNPOLICY_BLACK
    TURNPOLICY_LEFT
    TURNPOLICY_MAJORITY
    TURNPOLICY_MINORITY
    TURNPOLICY_RIGHT
    TURNPOLICY_WHITE
}

enum SiteBuildMetadataFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
}

enum SiteFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    host
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pathPrefix
    polyfill
    port
    siteMetadata___author
    siteMetadata___description
    siteMetadata___title
}

enum SitePageFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    component
    componentChunkName
    componentPath
    id
    internalComponentName
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    isCreatedByStatefulCreatePages
    matchPath
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    path
    pluginCreatorId
    pluginCreator___browserAPIs
    pluginCreator___children
    pluginCreator___children___children
    pluginCreator___children___children___children
    pluginCreator___children___children___id
    pluginCreator___children___id
    pluginCreator___children___internal___content
    pluginCreator___children___internal___contentDigest
    pluginCreator___children___internal___description
    pluginCreator___children___internal___fieldOwners
    pluginCreator___children___internal___ignoreType
    pluginCreator___children___internal___mediaType
    pluginCreator___children___internal___owner
    pluginCreator___children___internal___type
    pluginCreator___children___parent___children
    pluginCreator___children___parent___id
    pluginCreator___id
    pluginCreator___internal___content
    pluginCreator___internal___contentDigest
    pluginCreator___internal___description
    pluginCreator___internal___fieldOwners
    pluginCreator___internal___ignoreType
    pluginCreator___internal___mediaType
    pluginCreator___internal___owner
    pluginCreator___internal___type
    pluginCreator___name
    pluginCreator___nodeAPIs
    pluginCreator___packageJson___author
    pluginCreator___packageJson___dependencies
    pluginCreator___packageJson___dependencies___name
    pluginCreator___packageJson___dependencies___version
    pluginCreator___packageJson___description
    pluginCreator___packageJson___devDependencies
    pluginCreator___packageJson___devDependencies___name
    pluginCreator___packageJson___devDependencies___version
    pluginCreator___packageJson___keywords
    pluginCreator___packageJson___license
    pluginCreator___packageJson___main
    pluginCreator___packageJson___name
    pluginCreator___packageJson___peerDependencies
    pluginCreator___packageJson___peerDependencies___name
    pluginCreator___packageJson___peerDependencies___version
    pluginCreator___packageJson___version
    pluginCreator___parent___children
    pluginCreator___parent___children___children
    pluginCreator___parent___children___id
    pluginCreator___parent___id
    pluginCreator___parent___internal___content
    pluginCreator___parent___internal___contentDigest
    pluginCreator___parent___internal___description
    pluginCreator___parent___internal___fieldOwners
    pluginCreator___parent___internal___ignoreType
    pluginCreator___parent___internal___mediaType
    pluginCreator___parent___internal___owner
    pluginCreator___parent___internal___type
    pluginCreator___parent___parent___children
    pluginCreator___parent___parent___id
    pluginCreator___pluginFilepath
    pluginCreator___pluginOptions___allExtensions
    pluginCreator___pluginOptions___background_color
    pluginCreator___pluginOptions___base64Width
    pluginCreator___pluginOptions___cacheDigest
    pluginCreator___pluginOptions___cache_busting_mode
    pluginCreator___pluginOptions___crossOrigin
    pluginCreator___pluginOptions___defaultQuality
    pluginCreator___pluginOptions___display
    pluginCreator___pluginOptions___failOnError
    pluginCreator___pluginOptions___fieldName
    pluginCreator___pluginOptions___icon
    pluginCreator___pluginOptions___include_favicon
    pluginCreator___pluginOptions___isTSX
    pluginCreator___pluginOptions___jsxPragma
    pluginCreator___pluginOptions___legacy
    pluginCreator___pluginOptions___name
    pluginCreator___pluginOptions___path
    pluginCreator___pluginOptions___pathCheck
    pluginCreator___pluginOptions___short_name
    pluginCreator___pluginOptions___start_url
    pluginCreator___pluginOptions___stripMetadata
    pluginCreator___pluginOptions___theme_color
    pluginCreator___pluginOptions___theme_color_in_head
    pluginCreator___pluginOptions___typeName
    pluginCreator___pluginOptions___url
    pluginCreator___resolve
    pluginCreator___ssrAPIs
    pluginCreator___version
}

enum SitePluginFieldsEnum {
    browserAPIs
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson___author
    packageJson___dependencies
    packageJson___dependencies___name
    packageJson___dependencies___version
    packageJson___description
    packageJson___devDependencies
    packageJson___devDependencies___name
    packageJson___devDependencies___version
    packageJson___keywords
    packageJson___license
    packageJson___main
    packageJson___name
    packageJson___peerDependencies
    packageJson___peerDependencies___name
    packageJson___peerDependencies___version
    packageJson___version
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pluginFilepath
    pluginOptions___allExtensions
    pluginOptions___background_color
    pluginOptions___base64Width
    pluginOptions___cacheDigest
    pluginOptions___cache_busting_mode
    pluginOptions___crossOrigin
    pluginOptions___defaultQuality
    pluginOptions___display
    pluginOptions___failOnError
    pluginOptions___fieldName
    pluginOptions___icon
    pluginOptions___include_favicon
    pluginOptions___isTSX
    pluginOptions___jsxPragma
    pluginOptions___legacy
    pluginOptions___name
    pluginOptions___path
    pluginOptions___pathCheck
    pluginOptions___preset___default___fontSizes
    pluginOptions___preset___default___space
    pluginOptions___preset___funk___fontSizes
    pluginOptions___preset___funk___space
    pluginOptions___short_name
    pluginOptions___start_url
    pluginOptions___stripMetadata
    pluginOptions___theme_color
    pluginOptions___theme_color_in_head
    pluginOptions___typeName
    pluginOptions___url
    resolve
    ssrAPIs
    version
}

enum SortOrderEnum {
    ASC
    DESC
}

enum ThemeUiConfigFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    preset
    prismPreset
}

input AVIFOptions {
    lossless: Boolean
    quality: Int
    speed: Int
}

input BlurredOptions {
    "Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this"
    toFormat: ImageFormat
    "Width of the generated low-res preview. Default is 20px"
    width: Int
}

input BooleanQueryOperatorInput {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input DateQueryOperatorInput {
    eq: Date
    gt: Date
    gte: Date
    in: [Date]
    lt: Date
    lte: Date
    ne: Date
    nin: [Date]
}

input DirectoryFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input DirectorySortInput {
    fields: [DirectoryFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
    highlight: String!
    opacity: Int
    shadow: String!
}

input FileFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    childImageSharp: ImageSharpFilterInput
    children: NodeFilterListInput
    childrenImageSharp: ImageSharpFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    publicURL: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input FileSortInput {
    fields: [FileFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input GraphCMS_AssetConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: GraphCMS_ConnectPositionInput
    "Document to connect"
    where: GraphCMS_AssetWhereUniqueInput!
}

input GraphCMS_AssetCreateInput {
    authorAvatar: GraphCMS_AuthorCreateManyInlineInput
    coverImagePost: GraphCMS_PostCreateManyInlineInput
    createdAt: GraphCMS_DateTime
    fileName: String!
    handle: String!
    height: Float
    imageProduct: GraphCMS_ProductCreateManyInlineInput
    "Inline mutations for managing document localizations excluding the default locale"
    localizations: GraphCMS_AssetCreateLocalizationsInput
    mimeType: String
    seoImage: GraphCMS_SeoCreateManyInlineInput
    size: Float
    updatedAt: GraphCMS_DateTime
    width: Float
}

input GraphCMS_AssetCreateLocalizationDataInput {
    createdAt: GraphCMS_DateTime
    fileName: String!
    handle: String!
    height: Float
    mimeType: String
    size: Float
    updatedAt: GraphCMS_DateTime
    width: Float
}

input GraphCMS_AssetCreateLocalizationInput {
    "Localization input"
    data: GraphCMS_AssetCreateLocalizationDataInput!
    locale: GraphCMS_Locale!
}

input GraphCMS_AssetCreateLocalizationsInput {
    "Create localizations for the newly-created document"
    create: [GraphCMS_AssetCreateLocalizationInput!]
}

input GraphCMS_AssetCreateManyInlineInput {
    "Connect multiple existing Asset documents"
    connect: [GraphCMS_AssetWhereUniqueInput!]
    "Create and connect multiple existing Asset documents"
    create: [GraphCMS_AssetCreateInput!]
}

input GraphCMS_AssetCreateOneInlineInput {
    "Connect one existing Asset document"
    connect: GraphCMS_AssetWhereUniqueInput
    "Create and connect one Asset document"
    create: GraphCMS_AssetCreateInput
}

"Identifies documents"
input GraphCMS_AssetManyWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_AssetWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_AssetWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_AssetWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    authorAvatar_every: GraphCMS_AuthorWhereInput
    authorAvatar_none: GraphCMS_AuthorWhereInput
    authorAvatar_some: GraphCMS_AuthorWhereInput
    coverImagePost_every: GraphCMS_PostWhereInput
    coverImagePost_none: GraphCMS_PostWhereInput
    coverImagePost_some: GraphCMS_PostWhereInput
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    imageProduct_every: GraphCMS_ProductWhereInput
    imageProduct_none: GraphCMS_ProductWhereInput
    imageProduct_some: GraphCMS_ProductWhereInput
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    seoImage_every: GraphCMS_SeoWhereInput
    seoImage_none: GraphCMS_SeoWhereInput
    seoImage_some: GraphCMS_SeoWhereInput
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

"Transformations for Assets"
input GraphCMS_AssetTransformationInput {
    document: GraphCMS_DocumentTransformationInput
    image: GraphCMS_ImageTransformationInput
    "Pass true if you want to validate the passed transformation parameters"
    validateOptions: Boolean = false
}

input GraphCMS_AssetUpdateInput {
    authorAvatar: GraphCMS_AuthorUpdateManyInlineInput
    coverImagePost: GraphCMS_PostUpdateManyInlineInput
    fileName: String
    handle: String
    height: Float
    imageProduct: GraphCMS_ProductUpdateManyInlineInput
    "Manage document localizations"
    localizations: GraphCMS_AssetUpdateLocalizationsInput
    mimeType: String
    seoImage: GraphCMS_SeoUpdateManyInlineInput
    size: Float
    width: Float
}

input GraphCMS_AssetUpdateLocalizationDataInput {
    fileName: String
    handle: String
    height: Float
    mimeType: String
    size: Float
    width: Float
}

input GraphCMS_AssetUpdateLocalizationInput {
    data: GraphCMS_AssetUpdateLocalizationDataInput!
    locale: GraphCMS_Locale!
}

input GraphCMS_AssetUpdateLocalizationsInput {
    "Localizations to create"
    create: [GraphCMS_AssetCreateLocalizationInput!]
    "Localizations to delete"
    delete: [GraphCMS_Locale!]
    "Localizations to update"
    update: [GraphCMS_AssetUpdateLocalizationInput!]
    upsert: [GraphCMS_AssetUpsertLocalizationInput!]
}

input GraphCMS_AssetUpdateManyInlineInput {
    "Connect multiple existing Asset documents"
    connect: [GraphCMS_AssetConnectInput!]
    "Create and connect multiple Asset documents"
    create: [GraphCMS_AssetCreateInput!]
    "Delete multiple Asset documents"
    delete: [GraphCMS_AssetWhereUniqueInput!]
    "Disconnect multiple Asset documents"
    disconnect: [GraphCMS_AssetWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Asset documents"
    set: [GraphCMS_AssetWhereUniqueInput!]
    "Update multiple Asset documents"
    update: [GraphCMS_AssetUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Asset documents"
    upsert: [GraphCMS_AssetUpsertWithNestedWhereUniqueInput!]
}

input GraphCMS_AssetUpdateManyInput {
    fileName: String
    height: Float
    "Optional updates to localizations"
    localizations: GraphCMS_AssetUpdateManyLocalizationsInput
    mimeType: String
    size: Float
    width: Float
}

input GraphCMS_AssetUpdateManyLocalizationDataInput {
    fileName: String
    height: Float
    mimeType: String
    size: Float
    width: Float
}

input GraphCMS_AssetUpdateManyLocalizationInput {
    data: GraphCMS_AssetUpdateManyLocalizationDataInput!
    locale: GraphCMS_Locale!
}

input GraphCMS_AssetUpdateManyLocalizationsInput {
    "Localizations to update"
    update: [GraphCMS_AssetUpdateManyLocalizationInput!]
}

input GraphCMS_AssetUpdateManyWithNestedWhereInput {
    "Update many input"
    data: GraphCMS_AssetUpdateManyInput!
    "Document search"
    where: GraphCMS_AssetWhereInput!
}

input GraphCMS_AssetUpdateOneInlineInput {
    "Connect existing Asset document"
    connect: GraphCMS_AssetWhereUniqueInput
    "Create and connect one Asset document"
    create: GraphCMS_AssetCreateInput
    "Delete currently connected Asset document"
    delete: Boolean
    "Disconnect currently connected Asset document"
    disconnect: Boolean
    "Update single Asset document"
    update: GraphCMS_AssetUpdateWithNestedWhereUniqueInput
    "Upsert single Asset document"
    upsert: GraphCMS_AssetUpsertWithNestedWhereUniqueInput
}

input GraphCMS_AssetUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: GraphCMS_AssetUpdateInput!
    "Unique document search"
    where: GraphCMS_AssetWhereUniqueInput!
}

input GraphCMS_AssetUpsertInput {
    "Create document if it didn't exist"
    create: GraphCMS_AssetCreateInput!
    "Update document if it exists"
    update: GraphCMS_AssetUpdateInput!
}

input GraphCMS_AssetUpsertLocalizationInput {
    create: GraphCMS_AssetCreateLocalizationDataInput!
    locale: GraphCMS_Locale!
    update: GraphCMS_AssetUpdateLocalizationDataInput!
}

input GraphCMS_AssetUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: GraphCMS_AssetUpsertInput!
    "Unique document search"
    where: GraphCMS_AssetWhereUniqueInput!
}

"Identifies documents"
input GraphCMS_AssetWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_AssetWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_AssetWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_AssetWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    authorAvatar_every: GraphCMS_AuthorWhereInput
    authorAvatar_none: GraphCMS_AuthorWhereInput
    authorAvatar_some: GraphCMS_AuthorWhereInput
    coverImagePost_every: GraphCMS_PostWhereInput
    coverImagePost_none: GraphCMS_PostWhereInput
    coverImagePost_some: GraphCMS_PostWhereInput
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    fileName: String
    "All values containing the given string."
    fileName_contains: String
    "All values ending with the given string."
    fileName_ends_with: String
    "All values that are contained in given list."
    fileName_in: [String!]
    "All values that are not equal to given value."
    fileName_not: String
    "All values not containing the given string."
    fileName_not_contains: String
    "All values not ending with the given string"
    fileName_not_ends_with: String
    "All values that are not contained in given list."
    fileName_not_in: [String!]
    "All values not starting with the given string."
    fileName_not_starts_with: String
    "All values starting with the given string."
    fileName_starts_with: String
    handle: String
    "All values containing the given string."
    handle_contains: String
    "All values ending with the given string."
    handle_ends_with: String
    "All values that are contained in given list."
    handle_in: [String!]
    "All values that are not equal to given value."
    handle_not: String
    "All values not containing the given string."
    handle_not_contains: String
    "All values not ending with the given string"
    handle_not_ends_with: String
    "All values that are not contained in given list."
    handle_not_in: [String!]
    "All values not starting with the given string."
    handle_not_starts_with: String
    "All values starting with the given string."
    handle_starts_with: String
    height: Float
    "All values greater than the given value."
    height_gt: Float
    "All values greater than or equal the given value."
    height_gte: Float
    "All values that are contained in given list."
    height_in: [Float!]
    "All values less than the given value."
    height_lt: Float
    "All values less than or equal the given value."
    height_lte: Float
    "All values that are not equal to given value."
    height_not: Float
    "All values that are not contained in given list."
    height_not_in: [Float!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    imageProduct_every: GraphCMS_ProductWhereInput
    imageProduct_none: GraphCMS_ProductWhereInput
    imageProduct_some: GraphCMS_ProductWhereInput
    mimeType: String
    "All values containing the given string."
    mimeType_contains: String
    "All values ending with the given string."
    mimeType_ends_with: String
    "All values that are contained in given list."
    mimeType_in: [String!]
    "All values that are not equal to given value."
    mimeType_not: String
    "All values not containing the given string."
    mimeType_not_contains: String
    "All values not ending with the given string"
    mimeType_not_ends_with: String
    "All values that are not contained in given list."
    mimeType_not_in: [String!]
    "All values not starting with the given string."
    mimeType_not_starts_with: String
    "All values starting with the given string."
    mimeType_starts_with: String
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    seoImage_every: GraphCMS_SeoWhereInput
    seoImage_none: GraphCMS_SeoWhereInput
    seoImage_some: GraphCMS_SeoWhereInput
    size: Float
    "All values greater than the given value."
    size_gt: Float
    "All values greater than or equal the given value."
    size_gte: Float
    "All values that are contained in given list."
    size_in: [Float!]
    "All values less than the given value."
    size_lt: Float
    "All values less than or equal the given value."
    size_lte: Float
    "All values that are not equal to given value."
    size_not: Float
    "All values that are not contained in given list."
    size_not_in: [Float!]
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
    width: Float
    "All values greater than the given value."
    width_gt: Float
    "All values greater than or equal the given value."
    width_gte: Float
    "All values that are contained in given list."
    width_in: [Float!]
    "All values less than the given value."
    width_lt: Float
    "All values less than or equal the given value."
    width_lte: Float
    "All values that are not equal to given value."
    width_not: Float
    "All values that are not contained in given list."
    width_not_in: [Float!]
}

"References Asset record uniquely"
input GraphCMS_AssetWhereUniqueInput {
    id: ID
}

input GraphCMS_AuthorConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: GraphCMS_ConnectPositionInput
    "Document to connect"
    where: GraphCMS_AuthorWhereUniqueInput!
}

input GraphCMS_AuthorCreateInput {
    biography: String
    createdAt: GraphCMS_DateTime
    name: String!
    picture: GraphCMS_AssetCreateOneInlineInput
    posts: GraphCMS_PostCreateManyInlineInput
    title: String
    updatedAt: GraphCMS_DateTime
}

input GraphCMS_AuthorCreateManyInlineInput {
    "Connect multiple existing Author documents"
    connect: [GraphCMS_AuthorWhereUniqueInput!]
    "Create and connect multiple existing Author documents"
    create: [GraphCMS_AuthorCreateInput!]
}

input GraphCMS_AuthorCreateOneInlineInput {
    "Connect one existing Author document"
    connect: GraphCMS_AuthorWhereUniqueInput
    "Create and connect one Author document"
    create: GraphCMS_AuthorCreateInput
}

"Identifies documents"
input GraphCMS_AuthorManyWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_AuthorWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_AuthorWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_AuthorWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    biography: String
    "All values containing the given string."
    biography_contains: String
    "All values ending with the given string."
    biography_ends_with: String
    "All values that are contained in given list."
    biography_in: [String!]
    "All values that are not equal to given value."
    biography_not: String
    "All values not containing the given string."
    biography_not_contains: String
    "All values not ending with the given string"
    biography_not_ends_with: String
    "All values that are not contained in given list."
    biography_not_in: [String!]
    "All values not starting with the given string."
    biography_not_starts_with: String
    "All values starting with the given string."
    biography_starts_with: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    picture: GraphCMS_AssetWhereInput
    posts_every: GraphCMS_PostWhereInput
    posts_none: GraphCMS_PostWhereInput
    posts_some: GraphCMS_PostWhereInput
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

input GraphCMS_AuthorUpdateInput {
    biography: String
    name: String
    picture: GraphCMS_AssetUpdateOneInlineInput
    posts: GraphCMS_PostUpdateManyInlineInput
    title: String
}

input GraphCMS_AuthorUpdateManyInlineInput {
    "Connect multiple existing Author documents"
    connect: [GraphCMS_AuthorConnectInput!]
    "Create and connect multiple Author documents"
    create: [GraphCMS_AuthorCreateInput!]
    "Delete multiple Author documents"
    delete: [GraphCMS_AuthorWhereUniqueInput!]
    "Disconnect multiple Author documents"
    disconnect: [GraphCMS_AuthorWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Author documents"
    set: [GraphCMS_AuthorWhereUniqueInput!]
    "Update multiple Author documents"
    update: [GraphCMS_AuthorUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Author documents"
    upsert: [GraphCMS_AuthorUpsertWithNestedWhereUniqueInput!]
}

input GraphCMS_AuthorUpdateManyInput {
    biography: String
    name: String
    title: String
}

input GraphCMS_AuthorUpdateManyWithNestedWhereInput {
    "Update many input"
    data: GraphCMS_AuthorUpdateManyInput!
    "Document search"
    where: GraphCMS_AuthorWhereInput!
}

input GraphCMS_AuthorUpdateOneInlineInput {
    "Connect existing Author document"
    connect: GraphCMS_AuthorWhereUniqueInput
    "Create and connect one Author document"
    create: GraphCMS_AuthorCreateInput
    "Delete currently connected Author document"
    delete: Boolean
    "Disconnect currently connected Author document"
    disconnect: Boolean
    "Update single Author document"
    update: GraphCMS_AuthorUpdateWithNestedWhereUniqueInput
    "Upsert single Author document"
    upsert: GraphCMS_AuthorUpsertWithNestedWhereUniqueInput
}

input GraphCMS_AuthorUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: GraphCMS_AuthorUpdateInput!
    "Unique document search"
    where: GraphCMS_AuthorWhereUniqueInput!
}

input GraphCMS_AuthorUpsertInput {
    "Create document if it didn't exist"
    create: GraphCMS_AuthorCreateInput!
    "Update document if it exists"
    update: GraphCMS_AuthorUpdateInput!
}

input GraphCMS_AuthorUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: GraphCMS_AuthorUpsertInput!
    "Unique document search"
    where: GraphCMS_AuthorWhereUniqueInput!
}

"Identifies documents"
input GraphCMS_AuthorWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_AuthorWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_AuthorWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_AuthorWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    biography: String
    "All values containing the given string."
    biography_contains: String
    "All values ending with the given string."
    biography_ends_with: String
    "All values that are contained in given list."
    biography_in: [String!]
    "All values that are not equal to given value."
    biography_not: String
    "All values not containing the given string."
    biography_not_contains: String
    "All values not ending with the given string"
    biography_not_ends_with: String
    "All values that are not contained in given list."
    biography_not_in: [String!]
    "All values not starting with the given string."
    biography_not_starts_with: String
    "All values starting with the given string."
    biography_starts_with: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    picture: GraphCMS_AssetWhereInput
    posts_every: GraphCMS_PostWhereInput
    posts_none: GraphCMS_PostWhereInput
    posts_some: GraphCMS_PostWhereInput
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

"References Author record uniquely"
input GraphCMS_AuthorWhereUniqueInput {
    id: ID
}

"Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used."
input GraphCMS_ColorInput {
    hex: GraphCMS_Hex
    rgba: GraphCMS_RGBAInput
}

input GraphCMS_ConnectPositionInput {
    "Connect document after specified document"
    after: ID
    "Connect document before specified document"
    before: ID
    "Connect document at last position"
    end: Boolean
    "Connect document at first position"
    start: Boolean
}

input GraphCMS_DocumentOutputInput {
    """

    Transforms a document into a desired file type.
    See this matrix for format support:

    PDF:    jpg, odp, ods, odt, png, svg, txt, and webp
    DOC:    docx, html, jpg, odt, pdf, png, svg, txt, and webp
    DOCX:    doc, html, jpg, odt, pdf, png, svg, txt, and webp
    ODT:    doc, docx, html, jpg, pdf, png, svg, txt, and webp
    XLS:    jpg, pdf, ods, png, svg, xlsx, and webp
    XLSX:    jpg, pdf, ods, png, svg, xls, and webp
    ODS:    jpg, pdf, png, xls, svg, xlsx, and webp
    PPT:    jpg, odp, pdf, png, svg, pptx, and webp
    PPTX:    jpg, odp, pdf, png, svg, ppt, and webp
    ODP:    jpg, pdf, png, ppt, svg, pptx, and webp
    BMP:    jpg, odp, ods, odt, pdf, png, svg, and webp
    GIF:    jpg, odp, ods, odt, pdf, png, svg, and webp
    JPG:    jpg, odp, ods, odt, pdf, png, svg, and webp
    PNG:    jpg, odp, ods, odt, pdf, png, svg, and webp
    WEBP:    jpg, odp, ods, odt, pdf, png, svg, and webp
    TIFF:    jpg, odp, ods, odt, pdf, png, svg, and webp
    AI:        jpg, odp, ods, odt, pdf, png, svg, and webp
    PSD:    jpg, odp, ods, odt, pdf, png, svg, and webp
    SVG:    jpg, odp, ods, odt, pdf, png, and webp
    HTML:    jpg, odt, pdf, svg, txt, and webp
    TXT:    jpg, html, odt, pdf, svg, and webp
    """
    format: GraphCMS_DocumentFileTypes
}

"Transformations for Documents"
input GraphCMS_DocumentTransformationInput {
    "Changes the output for the file."
    output: GraphCMS_DocumentOutputInput
}

input GraphCMS_ImageResizeInput {
    "The default value for the fit parameter is fit:clip."
    fit: GraphCMS_ImageFit
    "The height in pixels to resize the image to. The value must be an integer from 1 to 10000."
    height: Int
    "The width in pixels to resize the image to. The value must be an integer from 1 to 10000."
    width: Int
}

"Transformations for Images"
input GraphCMS_ImageTransformationInput {
    "Resizes the image"
    resize: GraphCMS_ImageResizeInput
}

"Input for a geolocation point with latitude and longitude"
input GraphCMS_LocationInput {
    latitude: Float!
    longitude: Float!
}

input GraphCMS_MemberConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: GraphCMS_ConnectPositionInput
    "Document to connect"
    where: GraphCMS_MemberWhereUniqueInput!
}

input GraphCMS_MemberCreateInput {
    birthday: GraphCMS_Date
    createdAt: GraphCMS_DateTime
    description: String
    githubAccount: String
    name: String!
    technicalFields: String
    twitterAccount: String
    updatedAt: GraphCMS_DateTime
}

input GraphCMS_MemberCreateManyInlineInput {
    "Connect multiple existing Member documents"
    connect: [GraphCMS_MemberWhereUniqueInput!]
    "Create and connect multiple existing Member documents"
    create: [GraphCMS_MemberCreateInput!]
}

input GraphCMS_MemberCreateOneInlineInput {
    "Connect one existing Member document"
    connect: GraphCMS_MemberWhereUniqueInput
    "Create and connect one Member document"
    create: GraphCMS_MemberCreateInput
}

"Identifies documents"
input GraphCMS_MemberManyWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_MemberWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_MemberWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_MemberWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    birthday: GraphCMS_Date
    "All values greater than the given value."
    birthday_gt: GraphCMS_Date
    "All values greater than or equal the given value."
    birthday_gte: GraphCMS_Date
    "All values that are contained in given list."
    birthday_in: [GraphCMS_Date!]
    "All values less than the given value."
    birthday_lt: GraphCMS_Date
    "All values less than or equal the given value."
    birthday_lte: GraphCMS_Date
    "All values that are not equal to given value."
    birthday_not: GraphCMS_Date
    "All values that are not contained in given list."
    birthday_not_in: [GraphCMS_Date!]
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    githubAccount: String
    "All values containing the given string."
    githubAccount_contains: String
    "All values ending with the given string."
    githubAccount_ends_with: String
    "All values that are contained in given list."
    githubAccount_in: [String!]
    "All values that are not equal to given value."
    githubAccount_not: String
    "All values not containing the given string."
    githubAccount_not_contains: String
    "All values not ending with the given string"
    githubAccount_not_ends_with: String
    "All values that are not contained in given list."
    githubAccount_not_in: [String!]
    "All values not starting with the given string."
    githubAccount_not_starts_with: String
    "All values starting with the given string."
    githubAccount_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    technicalFields: String
    "All values containing the given string."
    technicalFields_contains: String
    "All values ending with the given string."
    technicalFields_ends_with: String
    "All values that are contained in given list."
    technicalFields_in: [String!]
    "All values that are not equal to given value."
    technicalFields_not: String
    "All values not containing the given string."
    technicalFields_not_contains: String
    "All values not ending with the given string"
    technicalFields_not_ends_with: String
    "All values that are not contained in given list."
    technicalFields_not_in: [String!]
    "All values not starting with the given string."
    technicalFields_not_starts_with: String
    "All values starting with the given string."
    technicalFields_starts_with: String
    twitterAccount: String
    "All values containing the given string."
    twitterAccount_contains: String
    "All values ending with the given string."
    twitterAccount_ends_with: String
    "All values that are contained in given list."
    twitterAccount_in: [String!]
    "All values that are not equal to given value."
    twitterAccount_not: String
    "All values not containing the given string."
    twitterAccount_not_contains: String
    "All values not ending with the given string"
    twitterAccount_not_ends_with: String
    "All values that are not contained in given list."
    twitterAccount_not_in: [String!]
    "All values not starting with the given string."
    twitterAccount_not_starts_with: String
    "All values starting with the given string."
    twitterAccount_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

input GraphCMS_MemberUpdateInput {
    birthday: GraphCMS_Date
    description: String
    githubAccount: String
    name: String
    technicalFields: String
    twitterAccount: String
}

input GraphCMS_MemberUpdateManyInlineInput {
    "Connect multiple existing Member documents"
    connect: [GraphCMS_MemberConnectInput!]
    "Create and connect multiple Member documents"
    create: [GraphCMS_MemberCreateInput!]
    "Delete multiple Member documents"
    delete: [GraphCMS_MemberWhereUniqueInput!]
    "Disconnect multiple Member documents"
    disconnect: [GraphCMS_MemberWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Member documents"
    set: [GraphCMS_MemberWhereUniqueInput!]
    "Update multiple Member documents"
    update: [GraphCMS_MemberUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Member documents"
    upsert: [GraphCMS_MemberUpsertWithNestedWhereUniqueInput!]
}

input GraphCMS_MemberUpdateManyInput {
    birthday: GraphCMS_Date
    description: String
    githubAccount: String
    technicalFields: String
    twitterAccount: String
}

input GraphCMS_MemberUpdateManyWithNestedWhereInput {
    "Update many input"
    data: GraphCMS_MemberUpdateManyInput!
    "Document search"
    where: GraphCMS_MemberWhereInput!
}

input GraphCMS_MemberUpdateOneInlineInput {
    "Connect existing Member document"
    connect: GraphCMS_MemberWhereUniqueInput
    "Create and connect one Member document"
    create: GraphCMS_MemberCreateInput
    "Delete currently connected Member document"
    delete: Boolean
    "Disconnect currently connected Member document"
    disconnect: Boolean
    "Update single Member document"
    update: GraphCMS_MemberUpdateWithNestedWhereUniqueInput
    "Upsert single Member document"
    upsert: GraphCMS_MemberUpsertWithNestedWhereUniqueInput
}

input GraphCMS_MemberUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: GraphCMS_MemberUpdateInput!
    "Unique document search"
    where: GraphCMS_MemberWhereUniqueInput!
}

input GraphCMS_MemberUpsertInput {
    "Create document if it didn't exist"
    create: GraphCMS_MemberCreateInput!
    "Update document if it exists"
    update: GraphCMS_MemberUpdateInput!
}

input GraphCMS_MemberUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: GraphCMS_MemberUpsertInput!
    "Unique document search"
    where: GraphCMS_MemberWhereUniqueInput!
}

"Identifies documents"
input GraphCMS_MemberWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_MemberWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_MemberWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_MemberWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    birthday: GraphCMS_Date
    "All values greater than the given value."
    birthday_gt: GraphCMS_Date
    "All values greater than or equal the given value."
    birthday_gte: GraphCMS_Date
    "All values that are contained in given list."
    birthday_in: [GraphCMS_Date!]
    "All values less than the given value."
    birthday_lt: GraphCMS_Date
    "All values less than or equal the given value."
    birthday_lte: GraphCMS_Date
    "All values that are not equal to given value."
    birthday_not: GraphCMS_Date
    "All values that are not contained in given list."
    birthday_not_in: [GraphCMS_Date!]
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    githubAccount: String
    "All values containing the given string."
    githubAccount_contains: String
    "All values ending with the given string."
    githubAccount_ends_with: String
    "All values that are contained in given list."
    githubAccount_in: [String!]
    "All values that are not equal to given value."
    githubAccount_not: String
    "All values not containing the given string."
    githubAccount_not_contains: String
    "All values not ending with the given string"
    githubAccount_not_ends_with: String
    "All values that are not contained in given list."
    githubAccount_not_in: [String!]
    "All values not starting with the given string."
    githubAccount_not_starts_with: String
    "All values starting with the given string."
    githubAccount_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    technicalFields: String
    "All values containing the given string."
    technicalFields_contains: String
    "All values ending with the given string."
    technicalFields_ends_with: String
    "All values that are contained in given list."
    technicalFields_in: [String!]
    "All values that are not equal to given value."
    technicalFields_not: String
    "All values not containing the given string."
    technicalFields_not_contains: String
    "All values not ending with the given string"
    technicalFields_not_ends_with: String
    "All values that are not contained in given list."
    technicalFields_not_in: [String!]
    "All values not starting with the given string."
    technicalFields_not_starts_with: String
    "All values starting with the given string."
    technicalFields_starts_with: String
    twitterAccount: String
    "All values containing the given string."
    twitterAccount_contains: String
    "All values ending with the given string."
    twitterAccount_ends_with: String
    "All values that are contained in given list."
    twitterAccount_in: [String!]
    "All values that are not equal to given value."
    twitterAccount_not: String
    "All values not containing the given string."
    twitterAccount_not_contains: String
    "All values not ending with the given string"
    twitterAccount_not_ends_with: String
    "All values that are not contained in given list."
    twitterAccount_not_in: [String!]
    "All values not starting with the given string."
    twitterAccount_not_starts_with: String
    "All values starting with the given string."
    twitterAccount_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

"References Member record uniquely"
input GraphCMS_MemberWhereUniqueInput {
    id: ID
    name: String
}

input GraphCMS_PageConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: GraphCMS_ConnectPositionInput
    "Document to connect"
    where: GraphCMS_PageWhereUniqueInput!
}

input GraphCMS_PageCreateInput {
    content: GraphCMS_RichTextAST!
    createdAt: GraphCMS_DateTime
    seo: GraphCMS_SeoCreateOneInlineInput
    slug: String!
    subtitle: String
    title: String!
    updatedAt: GraphCMS_DateTime
}

input GraphCMS_PageCreateManyInlineInput {
    "Connect multiple existing Page documents"
    connect: [GraphCMS_PageWhereUniqueInput!]
    "Create and connect multiple existing Page documents"
    create: [GraphCMS_PageCreateInput!]
}

input GraphCMS_PageCreateOneInlineInput {
    "Connect one existing Page document"
    connect: GraphCMS_PageWhereUniqueInput
    "Create and connect one Page document"
    create: GraphCMS_PageCreateInput
}

"Identifies documents"
input GraphCMS_PageManyWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_PageWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_PageWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_PageWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    seo: GraphCMS_SeoWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String!]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String!]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    subtitle: String
    "All values containing the given string."
    subtitle_contains: String
    "All values ending with the given string."
    subtitle_ends_with: String
    "All values that are contained in given list."
    subtitle_in: [String!]
    "All values that are not equal to given value."
    subtitle_not: String
    "All values not containing the given string."
    subtitle_not_contains: String
    "All values not ending with the given string"
    subtitle_not_ends_with: String
    "All values that are not contained in given list."
    subtitle_not_in: [String!]
    "All values not starting with the given string."
    subtitle_not_starts_with: String
    "All values starting with the given string."
    subtitle_starts_with: String
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

input GraphCMS_PageUpdateInput {
    content: GraphCMS_RichTextAST
    seo: GraphCMS_SeoUpdateOneInlineInput
    slug: String
    subtitle: String
    title: String
}

input GraphCMS_PageUpdateManyInlineInput {
    "Connect multiple existing Page documents"
    connect: [GraphCMS_PageConnectInput!]
    "Create and connect multiple Page documents"
    create: [GraphCMS_PageCreateInput!]
    "Delete multiple Page documents"
    delete: [GraphCMS_PageWhereUniqueInput!]
    "Disconnect multiple Page documents"
    disconnect: [GraphCMS_PageWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Page documents"
    set: [GraphCMS_PageWhereUniqueInput!]
    "Update multiple Page documents"
    update: [GraphCMS_PageUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Page documents"
    upsert: [GraphCMS_PageUpsertWithNestedWhereUniqueInput!]
}

input GraphCMS_PageUpdateManyInput {
    content: GraphCMS_RichTextAST
    subtitle: String
    title: String
}

input GraphCMS_PageUpdateManyWithNestedWhereInput {
    "Update many input"
    data: GraphCMS_PageUpdateManyInput!
    "Document search"
    where: GraphCMS_PageWhereInput!
}

input GraphCMS_PageUpdateOneInlineInput {
    "Connect existing Page document"
    connect: GraphCMS_PageWhereUniqueInput
    "Create and connect one Page document"
    create: GraphCMS_PageCreateInput
    "Delete currently connected Page document"
    delete: Boolean
    "Disconnect currently connected Page document"
    disconnect: Boolean
    "Update single Page document"
    update: GraphCMS_PageUpdateWithNestedWhereUniqueInput
    "Upsert single Page document"
    upsert: GraphCMS_PageUpsertWithNestedWhereUniqueInput
}

input GraphCMS_PageUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: GraphCMS_PageUpdateInput!
    "Unique document search"
    where: GraphCMS_PageWhereUniqueInput!
}

input GraphCMS_PageUpsertInput {
    "Create document if it didn't exist"
    create: GraphCMS_PageCreateInput!
    "Update document if it exists"
    update: GraphCMS_PageUpdateInput!
}

input GraphCMS_PageUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: GraphCMS_PageUpsertInput!
    "Unique document search"
    where: GraphCMS_PageWhereUniqueInput!
}

"Identifies documents"
input GraphCMS_PageWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_PageWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_PageWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_PageWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    seo: GraphCMS_SeoWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String!]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String!]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    subtitle: String
    "All values containing the given string."
    subtitle_contains: String
    "All values ending with the given string."
    subtitle_ends_with: String
    "All values that are contained in given list."
    subtitle_in: [String!]
    "All values that are not equal to given value."
    subtitle_not: String
    "All values not containing the given string."
    subtitle_not_contains: String
    "All values not ending with the given string"
    subtitle_not_ends_with: String
    "All values that are not contained in given list."
    subtitle_not_in: [String!]
    "All values not starting with the given string."
    subtitle_not_starts_with: String
    "All values starting with the given string."
    subtitle_starts_with: String
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

"References Page record uniquely"
input GraphCMS_PageWhereUniqueInput {
    id: ID
    slug: String
}

input GraphCMS_PostConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: GraphCMS_ConnectPositionInput
    "Document to connect"
    where: GraphCMS_PostWhereUniqueInput!
}

input GraphCMS_PostCreateInput {
    author: GraphCMS_AuthorCreateOneInlineInput
    content: GraphCMS_RichTextAST!
    coverImage: GraphCMS_AssetCreateOneInlineInput
    createdAt: GraphCMS_DateTime
    date: GraphCMS_Date!
    excerpt: String
    seo: GraphCMS_SeoCreateOneInlineInput
    slug: String!
    tags: [String!]
    title: String!
    updatedAt: GraphCMS_DateTime
}

input GraphCMS_PostCreateManyInlineInput {
    "Connect multiple existing Post documents"
    connect: [GraphCMS_PostWhereUniqueInput!]
    "Create and connect multiple existing Post documents"
    create: [GraphCMS_PostCreateInput!]
}

input GraphCMS_PostCreateOneInlineInput {
    "Connect one existing Post document"
    connect: GraphCMS_PostWhereUniqueInput
    "Create and connect one Post document"
    create: GraphCMS_PostCreateInput
}

"Identifies documents"
input GraphCMS_PostManyWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_PostWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_PostWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_PostWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    author: GraphCMS_AuthorWhereInput
    coverImage: GraphCMS_AssetWhereInput
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    date: GraphCMS_Date
    "All values greater than the given value."
    date_gt: GraphCMS_Date
    "All values greater than or equal the given value."
    date_gte: GraphCMS_Date
    "All values that are contained in given list."
    date_in: [GraphCMS_Date!]
    "All values less than the given value."
    date_lt: GraphCMS_Date
    "All values less than or equal the given value."
    date_lte: GraphCMS_Date
    "All values that are not equal to given value."
    date_not: GraphCMS_Date
    "All values that are not contained in given list."
    date_not_in: [GraphCMS_Date!]
    excerpt: String
    "All values containing the given string."
    excerpt_contains: String
    "All values ending with the given string."
    excerpt_ends_with: String
    "All values that are contained in given list."
    excerpt_in: [String!]
    "All values that are not equal to given value."
    excerpt_not: String
    "All values not containing the given string."
    excerpt_not_contains: String
    "All values not ending with the given string"
    excerpt_not_ends_with: String
    "All values that are not contained in given list."
    excerpt_not_in: [String!]
    "All values not starting with the given string."
    excerpt_not_starts_with: String
    "All values starting with the given string."
    excerpt_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    seo: GraphCMS_SeoWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String!]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String!]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    "Matches if the field array contains *all* items provided to the filter and order does match"
    tags: [String!]
    "Matches if the field array contains *all* items provided to the filter"
    tags_contains_all: [String!]
    "Matches if the field array does not contain any of the items provided to the filter"
    tags_contains_none: [String!]
    "Matches if the field array contains at least one item provided to the filter"
    tags_contains_some: [String!]
    "Matches if the field array does not contains *all* items provided to the filter or order does not match"
    tags_not: [String!]
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

input GraphCMS_PostUpdateInput {
    author: GraphCMS_AuthorUpdateOneInlineInput
    content: GraphCMS_RichTextAST
    coverImage: GraphCMS_AssetUpdateOneInlineInput
    date: GraphCMS_Date
    excerpt: String
    seo: GraphCMS_SeoUpdateOneInlineInput
    slug: String
    tags: [String!]
    title: String
}

input GraphCMS_PostUpdateManyInlineInput {
    "Connect multiple existing Post documents"
    connect: [GraphCMS_PostConnectInput!]
    "Create and connect multiple Post documents"
    create: [GraphCMS_PostCreateInput!]
    "Delete multiple Post documents"
    delete: [GraphCMS_PostWhereUniqueInput!]
    "Disconnect multiple Post documents"
    disconnect: [GraphCMS_PostWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Post documents"
    set: [GraphCMS_PostWhereUniqueInput!]
    "Update multiple Post documents"
    update: [GraphCMS_PostUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Post documents"
    upsert: [GraphCMS_PostUpsertWithNestedWhereUniqueInput!]
}

input GraphCMS_PostUpdateManyInput {
    content: GraphCMS_RichTextAST
    date: GraphCMS_Date
    excerpt: String
    tags: [String!]
    title: String
}

input GraphCMS_PostUpdateManyWithNestedWhereInput {
    "Update many input"
    data: GraphCMS_PostUpdateManyInput!
    "Document search"
    where: GraphCMS_PostWhereInput!
}

input GraphCMS_PostUpdateOneInlineInput {
    "Connect existing Post document"
    connect: GraphCMS_PostWhereUniqueInput
    "Create and connect one Post document"
    create: GraphCMS_PostCreateInput
    "Delete currently connected Post document"
    delete: Boolean
    "Disconnect currently connected Post document"
    disconnect: Boolean
    "Update single Post document"
    update: GraphCMS_PostUpdateWithNestedWhereUniqueInput
    "Upsert single Post document"
    upsert: GraphCMS_PostUpsertWithNestedWhereUniqueInput
}

input GraphCMS_PostUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: GraphCMS_PostUpdateInput!
    "Unique document search"
    where: GraphCMS_PostWhereUniqueInput!
}

input GraphCMS_PostUpsertInput {
    "Create document if it didn't exist"
    create: GraphCMS_PostCreateInput!
    "Update document if it exists"
    update: GraphCMS_PostUpdateInput!
}

input GraphCMS_PostUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: GraphCMS_PostUpsertInput!
    "Unique document search"
    where: GraphCMS_PostWhereUniqueInput!
}

"Identifies documents"
input GraphCMS_PostWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_PostWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_PostWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_PostWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    author: GraphCMS_AuthorWhereInput
    coverImage: GraphCMS_AssetWhereInput
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    date: GraphCMS_Date
    "All values greater than the given value."
    date_gt: GraphCMS_Date
    "All values greater than or equal the given value."
    date_gte: GraphCMS_Date
    "All values that are contained in given list."
    date_in: [GraphCMS_Date!]
    "All values less than the given value."
    date_lt: GraphCMS_Date
    "All values less than or equal the given value."
    date_lte: GraphCMS_Date
    "All values that are not equal to given value."
    date_not: GraphCMS_Date
    "All values that are not contained in given list."
    date_not_in: [GraphCMS_Date!]
    excerpt: String
    "All values containing the given string."
    excerpt_contains: String
    "All values ending with the given string."
    excerpt_ends_with: String
    "All values that are contained in given list."
    excerpt_in: [String!]
    "All values that are not equal to given value."
    excerpt_not: String
    "All values not containing the given string."
    excerpt_not_contains: String
    "All values not ending with the given string"
    excerpt_not_ends_with: String
    "All values that are not contained in given list."
    excerpt_not_in: [String!]
    "All values not starting with the given string."
    excerpt_not_starts_with: String
    "All values starting with the given string."
    excerpt_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    seo: GraphCMS_SeoWhereInput
    slug: String
    "All values containing the given string."
    slug_contains: String
    "All values ending with the given string."
    slug_ends_with: String
    "All values that are contained in given list."
    slug_in: [String!]
    "All values that are not equal to given value."
    slug_not: String
    "All values not containing the given string."
    slug_not_contains: String
    "All values not ending with the given string"
    slug_not_ends_with: String
    "All values that are not contained in given list."
    slug_not_in: [String!]
    "All values not starting with the given string."
    slug_not_starts_with: String
    "All values starting with the given string."
    slug_starts_with: String
    "Matches if the field array contains *all* items provided to the filter and order does match"
    tags: [String!]
    "Matches if the field array contains *all* items provided to the filter"
    tags_contains_all: [String!]
    "Matches if the field array does not contain any of the items provided to the filter"
    tags_contains_none: [String!]
    "Matches if the field array contains at least one item provided to the filter"
    tags_contains_some: [String!]
    "Matches if the field array does not contains *all* items provided to the filter or order does not match"
    tags_not: [String!]
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

"References Post record uniquely"
input GraphCMS_PostWhereUniqueInput {
    id: ID
    slug: String
}

input GraphCMS_ProductConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: GraphCMS_ConnectPositionInput
    "Document to connect"
    where: GraphCMS_ProductWhereUniqueInput!
}

input GraphCMS_ProductCreateInput {
    createdAt: GraphCMS_DateTime
    description: String
    image: GraphCMS_AssetCreateOneInlineInput
    name: String!
    updatedAt: GraphCMS_DateTime
    url: String
}

input GraphCMS_ProductCreateManyInlineInput {
    "Connect multiple existing Product documents"
    connect: [GraphCMS_ProductWhereUniqueInput!]
    "Create and connect multiple existing Product documents"
    create: [GraphCMS_ProductCreateInput!]
}

input GraphCMS_ProductCreateOneInlineInput {
    "Connect one existing Product document"
    connect: GraphCMS_ProductWhereUniqueInput
    "Create and connect one Product document"
    create: GraphCMS_ProductCreateInput
}

"Identifies documents"
input GraphCMS_ProductManyWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_ProductWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_ProductWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_ProductWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    image: GraphCMS_AssetWhereInput
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
    url: String
    "All values containing the given string."
    url_contains: String
    "All values ending with the given string."
    url_ends_with: String
    "All values that are contained in given list."
    url_in: [String!]
    "All values that are not equal to given value."
    url_not: String
    "All values not containing the given string."
    url_not_contains: String
    "All values not ending with the given string"
    url_not_ends_with: String
    "All values that are not contained in given list."
    url_not_in: [String!]
    "All values not starting with the given string."
    url_not_starts_with: String
    "All values starting with the given string."
    url_starts_with: String
}

input GraphCMS_ProductUpdateInput {
    description: String
    image: GraphCMS_AssetUpdateOneInlineInput
    name: String
    url: String
}

input GraphCMS_ProductUpdateManyInlineInput {
    "Connect multiple existing Product documents"
    connect: [GraphCMS_ProductConnectInput!]
    "Create and connect multiple Product documents"
    create: [GraphCMS_ProductCreateInput!]
    "Delete multiple Product documents"
    delete: [GraphCMS_ProductWhereUniqueInput!]
    "Disconnect multiple Product documents"
    disconnect: [GraphCMS_ProductWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Product documents"
    set: [GraphCMS_ProductWhereUniqueInput!]
    "Update multiple Product documents"
    update: [GraphCMS_ProductUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Product documents"
    upsert: [GraphCMS_ProductUpsertWithNestedWhereUniqueInput!]
}

input GraphCMS_ProductUpdateManyInput {
    description: String
    name: String
    url: String
}

input GraphCMS_ProductUpdateManyWithNestedWhereInput {
    "Update many input"
    data: GraphCMS_ProductUpdateManyInput!
    "Document search"
    where: GraphCMS_ProductWhereInput!
}

input GraphCMS_ProductUpdateOneInlineInput {
    "Connect existing Product document"
    connect: GraphCMS_ProductWhereUniqueInput
    "Create and connect one Product document"
    create: GraphCMS_ProductCreateInput
    "Delete currently connected Product document"
    delete: Boolean
    "Disconnect currently connected Product document"
    disconnect: Boolean
    "Update single Product document"
    update: GraphCMS_ProductUpdateWithNestedWhereUniqueInput
    "Upsert single Product document"
    upsert: GraphCMS_ProductUpsertWithNestedWhereUniqueInput
}

input GraphCMS_ProductUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: GraphCMS_ProductUpdateInput!
    "Unique document search"
    where: GraphCMS_ProductWhereUniqueInput!
}

input GraphCMS_ProductUpsertInput {
    "Create document if it didn't exist"
    create: GraphCMS_ProductCreateInput!
    "Update document if it exists"
    update: GraphCMS_ProductUpdateInput!
}

input GraphCMS_ProductUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: GraphCMS_ProductUpsertInput!
    "Unique document search"
    where: GraphCMS_ProductWhereUniqueInput!
}

"Identifies documents"
input GraphCMS_ProductWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_ProductWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_ProductWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_ProductWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    image: GraphCMS_AssetWhereInput
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
    url: String
    "All values containing the given string."
    url_contains: String
    "All values ending with the given string."
    url_ends_with: String
    "All values that are contained in given list."
    url_in: [String!]
    "All values that are not equal to given value."
    url_not: String
    "All values not containing the given string."
    url_not_contains: String
    "All values not ending with the given string"
    url_not_ends_with: String
    "All values that are not contained in given list."
    url_not_in: [String!]
    "All values not starting with the given string."
    url_not_starts_with: String
    "All values starting with the given string."
    url_starts_with: String
}

"References Product record uniquely"
input GraphCMS_ProductWhereUniqueInput {
    id: ID
}

input GraphCMS_PublishLocaleInput {
    "Locales to publish"
    locale: GraphCMS_Locale!
    "Stages to publish selected locales to"
    stages: [GraphCMS_Stage!]!
}

"Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()"
input GraphCMS_RGBAInput {
    a: GraphCMS_RGBATransparency!
    b: GraphCMS_RGBAHue!
    g: GraphCMS_RGBAHue!
    r: GraphCMS_RGBAHue!
}

input GraphCMS_SeoConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: GraphCMS_ConnectPositionInput
    "Document to connect"
    where: GraphCMS_SeoWhereUniqueInput!
}

input GraphCMS_SeoCreateInput {
    createdAt: GraphCMS_DateTime
    description: String
    image: GraphCMS_AssetCreateOneInlineInput
    keywords: [String!]
    parent: GraphCMS_SeoParentCreateOneInlineInput
    title: String
    updatedAt: GraphCMS_DateTime
}

input GraphCMS_SeoCreateManyInlineInput {
    "Connect multiple existing Seo documents"
    connect: [GraphCMS_SeoWhereUniqueInput!]
    "Create and connect multiple existing Seo documents"
    create: [GraphCMS_SeoCreateInput!]
}

input GraphCMS_SeoCreateOneInlineInput {
    "Connect one existing Seo document"
    connect: GraphCMS_SeoWhereUniqueInput
    "Create and connect one Seo document"
    create: GraphCMS_SeoCreateInput
}

"Identifies documents"
input GraphCMS_SeoManyWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_SeoWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_SeoWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_SeoWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    image: GraphCMS_AssetWhereInput
    "Matches if the field array contains *all* items provided to the filter and order does match"
    keywords: [String!]
    "Matches if the field array contains *all* items provided to the filter"
    keywords_contains_all: [String!]
    "Matches if the field array does not contain any of the items provided to the filter"
    keywords_contains_none: [String!]
    "Matches if the field array contains at least one item provided to the filter"
    keywords_contains_some: [String!]
    "Matches if the field array does not contains *all* items provided to the filter or order does not match"
    keywords_not: [String!]
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

input GraphCMS_SeoParentConnectInput {
    Page: GraphCMS_PageConnectInput
    Post: GraphCMS_PostConnectInput
}

input GraphCMS_SeoParentCreateInput {
    Page: GraphCMS_PageCreateInput
    Post: GraphCMS_PostCreateInput
}

input GraphCMS_SeoParentCreateManyInlineInput {
    "Connect multiple existing SeoParent documents"
    connect: [GraphCMS_SeoParentWhereUniqueInput!]
    "Create and connect multiple existing SeoParent documents"
    create: [GraphCMS_SeoParentCreateInput!]
}

input GraphCMS_SeoParentCreateOneInlineInput {
    "Connect one existing SeoParent document"
    connect: GraphCMS_SeoParentWhereUniqueInput
    "Create and connect one SeoParent document"
    create: GraphCMS_SeoParentCreateInput
}

input GraphCMS_SeoParentUpdateInput {
    Page: GraphCMS_PageUpdateInput
    Post: GraphCMS_PostUpdateInput
}

input GraphCMS_SeoParentUpdateManyInlineInput {
    "Connect multiple existing SeoParent documents"
    connect: [GraphCMS_SeoParentConnectInput!]
    "Create and connect multiple SeoParent documents"
    create: [GraphCMS_SeoParentCreateInput!]
    "Delete multiple SeoParent documents"
    delete: [GraphCMS_SeoParentWhereUniqueInput!]
    "Disconnect multiple SeoParent documents"
    disconnect: [GraphCMS_SeoParentWhereUniqueInput!]
    "Override currently-connected documents with multiple existing SeoParent documents"
    set: [GraphCMS_SeoParentWhereUniqueInput!]
    "Update multiple SeoParent documents"
    update: [GraphCMS_SeoParentUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple SeoParent documents"
    upsert: [GraphCMS_SeoParentUpsertWithNestedWhereUniqueInput!]
}

input GraphCMS_SeoParentUpdateManyWithNestedWhereInput {
    Page: GraphCMS_PageUpdateManyWithNestedWhereInput
    Post: GraphCMS_PostUpdateManyWithNestedWhereInput
}

input GraphCMS_SeoParentUpdateOneInlineInput {
    "Connect existing SeoParent document"
    connect: GraphCMS_SeoParentWhereUniqueInput
    "Create and connect one SeoParent document"
    create: GraphCMS_SeoParentCreateInput
    "Delete currently connected SeoParent document"
    delete: Boolean
    "Disconnect currently connected SeoParent document"
    disconnect: Boolean
    "Update single SeoParent document"
    update: GraphCMS_SeoParentUpdateWithNestedWhereUniqueInput
    "Upsert single SeoParent document"
    upsert: GraphCMS_SeoParentUpsertWithNestedWhereUniqueInput
}

input GraphCMS_SeoParentUpdateWithNestedWhereUniqueInput {
    Page: GraphCMS_PageUpdateWithNestedWhereUniqueInput
    Post: GraphCMS_PostUpdateWithNestedWhereUniqueInput
}

input GraphCMS_SeoParentUpsertWithNestedWhereUniqueInput {
    Page: GraphCMS_PageUpsertWithNestedWhereUniqueInput
    Post: GraphCMS_PostUpsertWithNestedWhereUniqueInput
}

input GraphCMS_SeoParentWhereInput {
    Page: GraphCMS_PageWhereInput
    Post: GraphCMS_PostWhereInput
}

input GraphCMS_SeoParentWhereUniqueInput {
    Page: GraphCMS_PageWhereUniqueInput
    Post: GraphCMS_PostWhereUniqueInput
}

input GraphCMS_SeoUpdateInput {
    description: String
    image: GraphCMS_AssetUpdateOneInlineInput
    keywords: [String!]
    parent: GraphCMS_SeoParentUpdateOneInlineInput
    title: String
}

input GraphCMS_SeoUpdateManyInlineInput {
    "Connect multiple existing Seo documents"
    connect: [GraphCMS_SeoConnectInput!]
    "Create and connect multiple Seo documents"
    create: [GraphCMS_SeoCreateInput!]
    "Delete multiple Seo documents"
    delete: [GraphCMS_SeoWhereUniqueInput!]
    "Disconnect multiple Seo documents"
    disconnect: [GraphCMS_SeoWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Seo documents"
    set: [GraphCMS_SeoWhereUniqueInput!]
    "Update multiple Seo documents"
    update: [GraphCMS_SeoUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Seo documents"
    upsert: [GraphCMS_SeoUpsertWithNestedWhereUniqueInput!]
}

input GraphCMS_SeoUpdateManyInput {
    description: String
    keywords: [String!]
    title: String
}

input GraphCMS_SeoUpdateManyWithNestedWhereInput {
    "Update many input"
    data: GraphCMS_SeoUpdateManyInput!
    "Document search"
    where: GraphCMS_SeoWhereInput!
}

input GraphCMS_SeoUpdateOneInlineInput {
    "Connect existing Seo document"
    connect: GraphCMS_SeoWhereUniqueInput
    "Create and connect one Seo document"
    create: GraphCMS_SeoCreateInput
    "Delete currently connected Seo document"
    delete: Boolean
    "Disconnect currently connected Seo document"
    disconnect: Boolean
    "Update single Seo document"
    update: GraphCMS_SeoUpdateWithNestedWhereUniqueInput
    "Upsert single Seo document"
    upsert: GraphCMS_SeoUpsertWithNestedWhereUniqueInput
}

input GraphCMS_SeoUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: GraphCMS_SeoUpdateInput!
    "Unique document search"
    where: GraphCMS_SeoWhereUniqueInput!
}

input GraphCMS_SeoUpsertInput {
    "Create document if it didn't exist"
    create: GraphCMS_SeoCreateInput!
    "Update document if it exists"
    update: GraphCMS_SeoUpdateInput!
}

input GraphCMS_SeoUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: GraphCMS_SeoUpsertInput!
    "Unique document search"
    where: GraphCMS_SeoWhereUniqueInput!
}

"Identifies documents"
input GraphCMS_SeoWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_SeoWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_SeoWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_SeoWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    createdBy: GraphCMS_UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    image: GraphCMS_AssetWhereInput
    "Matches if the field array contains *all* items provided to the filter and order does match"
    keywords: [String!]
    "Matches if the field array contains *all* items provided to the filter"
    keywords_contains_all: [String!]
    "Matches if the field array does not contain any of the items provided to the filter"
    keywords_contains_none: [String!]
    "Matches if the field array contains at least one item provided to the filter"
    keywords_contains_some: [String!]
    "Matches if the field array does not contains *all* items provided to the filter or order does not match"
    keywords_not: [String!]
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    publishedBy: GraphCMS_UserWhereInput
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
    updatedBy: GraphCMS_UserWhereInput
}

"References Seo record uniquely"
input GraphCMS_SeoWhereUniqueInput {
    id: ID
}

input GraphCMS_UnpublishLocaleInput {
    "Locales to unpublish"
    locale: GraphCMS_Locale!
    "Stages to unpublish selected locales from"
    stages: [GraphCMS_Stage!]!
}

"Identifies documents"
input GraphCMS_UserManyWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_UserWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_UserWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_UserWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "All values that are not equal to given value."
    isActive_not: Boolean
    kind: GraphCMS_UserKind
    "All values that are contained in given list."
    kind_in: [GraphCMS_UserKind!]
    "All values that are not equal to given value."
    kind_not: GraphCMS_UserKind
    "All values that are not contained in given list."
    kind_not_in: [GraphCMS_UserKind!]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    picture: String
    "All values containing the given string."
    picture_contains: String
    "All values ending with the given string."
    picture_ends_with: String
    "All values that are contained in given list."
    picture_in: [String!]
    "All values that are not equal to given value."
    picture_not: String
    "All values not containing the given string."
    picture_not_contains: String
    "All values not ending with the given string"
    picture_not_ends_with: String
    "All values that are not contained in given list."
    picture_not_in: [String!]
    "All values not starting with the given string."
    picture_not_starts_with: String
    "All values starting with the given string."
    picture_starts_with: String
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
}

"Identifies documents"
input GraphCMS_UserWhereInput {
    "Logical AND on all given filters."
    AND: [GraphCMS_UserWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [GraphCMS_UserWhereInput!]
    "Logical OR on all given filters."
    OR: [GraphCMS_UserWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: GraphCMS_DateTime
    "All values greater than the given value."
    createdAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    createdAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    createdAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    createdAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    createdAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    createdAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [GraphCMS_DateTime!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "All values that are not equal to given value."
    isActive_not: Boolean
    kind: GraphCMS_UserKind
    "All values that are contained in given list."
    kind_in: [GraphCMS_UserKind!]
    "All values that are not equal to given value."
    kind_not: GraphCMS_UserKind
    "All values that are not contained in given list."
    kind_not_in: [GraphCMS_UserKind!]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    picture: String
    "All values containing the given string."
    picture_contains: String
    "All values ending with the given string."
    picture_ends_with: String
    "All values that are contained in given list."
    picture_in: [String!]
    "All values that are not equal to given value."
    picture_not: String
    "All values not containing the given string."
    picture_not_contains: String
    "All values not ending with the given string"
    picture_not_ends_with: String
    "All values that are not contained in given list."
    picture_not_in: [String!]
    "All values not starting with the given string."
    picture_not_starts_with: String
    "All values starting with the given string."
    picture_starts_with: String
    publishedAt: GraphCMS_DateTime
    "All values greater than the given value."
    publishedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    publishedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    publishedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    publishedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    publishedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [GraphCMS_DateTime!]
    updatedAt: GraphCMS_DateTime
    "All values greater than the given value."
    updatedAt_gt: GraphCMS_DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: GraphCMS_DateTime
    "All values that are contained in given list."
    updatedAt_in: [GraphCMS_DateTime!]
    "All values less than the given value."
    updatedAt_lt: GraphCMS_DateTime
    "All values less than or equal the given value."
    updatedAt_lte: GraphCMS_DateTime
    "All values that are not equal to given value."
    updatedAt_not: GraphCMS_DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [GraphCMS_DateTime!]
}

"References User record uniquely"
input GraphCMS_UserWhereUniqueInput {
    id: ID
}

input GraphCMS_VersionWhereInput {
    id: ID!
    revision: Int!
    stage: GraphCMS_Stage!
}

input GraphQLSourceFilterInput {
    children: NodeFilterListInput
    fieldName: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    typeName: StringQueryOperatorInput
}

input GraphQLSourceSortInput {
    fields: [GraphQLSourceFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input ImageSharpFilterInput {
    children: NodeFilterListInput
    fixed: ImageSharpFixedFilterInput
    fluid: ImageSharpFluidFilterInput
    gatsbyImageData: JSONQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    original: ImageSharpOriginalFilterInput
    parent: NodeFilterInput
    resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
    elemMatch: ImageSharpFilterInput
}

input ImageSharpFixedFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpOriginalFilterInput {
    height: FloatQueryOperatorInput
    src: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpResizeFilterInput {
    aspectRatio: FloatQueryOperatorInput
    height: IntQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input ImageSharpSortInput {
    fields: [ImageSharpFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input IntQueryOperatorInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input InternalFilterInput {
    content: StringQueryOperatorInput
    contentDigest: StringQueryOperatorInput
    description: StringQueryOperatorInput
    fieldOwners: StringQueryOperatorInput
    ignoreType: BooleanQueryOperatorInput
    mediaType: StringQueryOperatorInput
    owner: StringQueryOperatorInput
    type: StringQueryOperatorInput
}

input JPGOptions {
    progressive: Boolean = true
    quality: Int
}

input JSONQueryOperatorInput {
    eq: JSON
    glob: JSON
    in: [JSON]
    ne: JSON
    nin: [JSON]
    regex: JSON
}

input NodeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input NodeFilterListInput {
    elemMatch: NodeFilterInput
}

input PNGOptions {
    compressionSpeed: Int = 4
    quality: Int
}

input Potrace {
    alphaMax: Float
    background: String
    blackOnWhite: Boolean
    color: String
    optCurve: Boolean
    optTolerance: Float
    threshold: Int
    turdSize: Float
    turnPolicy: PotraceTurnPolicy
}

input SiteBuildMetadataFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
    fields: [SiteBuildMetadataFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    host: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    pathPrefix: StringQueryOperatorInput
    polyfill: BooleanQueryOperatorInput
    port: IntQueryOperatorInput
    siteMetadata: SiteSiteMetadataFilterInput
}

input SitePageFilterInput {
    children: NodeFilterListInput
    component: StringQueryOperatorInput
    componentChunkName: StringQueryOperatorInput
    componentPath: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    internalComponentName: StringQueryOperatorInput
    isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
    matchPath: StringQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    pluginCreator: SitePluginFilterInput
    pluginCreatorId: StringQueryOperatorInput
}

input SitePageSortInput {
    fields: [SitePageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
    browserAPIs: StringQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    name: StringQueryOperatorInput
    nodeAPIs: StringQueryOperatorInput
    packageJson: SitePluginPackageJsonFilterInput
    parent: NodeFilterInput
    pluginFilepath: StringQueryOperatorInput
    pluginOptions: SitePluginPluginOptionsFilterInput
    resolve: StringQueryOperatorInput
    ssrAPIs: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
    author: StringQueryOperatorInput
    dependencies: SitePluginPackageJsonDependenciesFilterListInput
    description: StringQueryOperatorInput
    devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
    keywords: StringQueryOperatorInput
    license: StringQueryOperatorInput
    main: StringQueryOperatorInput
    name: StringQueryOperatorInput
    peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPluginOptionsFilterInput {
    allExtensions: BooleanQueryOperatorInput
    background_color: StringQueryOperatorInput
    base64Width: IntQueryOperatorInput
    cacheDigest: StringQueryOperatorInput
    cache_busting_mode: StringQueryOperatorInput
    crossOrigin: StringQueryOperatorInput
    defaultQuality: IntQueryOperatorInput
    display: StringQueryOperatorInput
    failOnError: BooleanQueryOperatorInput
    fieldName: StringQueryOperatorInput
    icon: StringQueryOperatorInput
    include_favicon: BooleanQueryOperatorInput
    isTSX: BooleanQueryOperatorInput
    jsxPragma: StringQueryOperatorInput
    legacy: BooleanQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
    pathCheck: BooleanQueryOperatorInput
    preset: SitePluginPluginOptionsPresetFilterInput
    short_name: StringQueryOperatorInput
    start_url: StringQueryOperatorInput
    stripMetadata: BooleanQueryOperatorInput
    theme_color: StringQueryOperatorInput
    theme_color_in_head: BooleanQueryOperatorInput
    typeName: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultColorsFilterInput {
    background: StringQueryOperatorInput
    muted: StringQueryOperatorInput
    primary: StringQueryOperatorInput
    secondary: StringQueryOperatorInput
    text: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultFilterInput {
    colors: SitePluginPluginOptionsPresetDefaultColorsFilterInput
    fontSizes: IntQueryOperatorInput
    fontWeights: SitePluginPluginOptionsPresetDefaultFontWeightsFilterInput
    fonts: SitePluginPluginOptionsPresetDefaultFontsFilterInput
    lineHeights: SitePluginPluginOptionsPresetDefaultLineHeightsFilterInput
    space: IntQueryOperatorInput
    styles: SitePluginPluginOptionsPresetDefaultStylesFilterInput
}

input SitePluginPluginOptionsPresetDefaultFontWeightsFilterInput {
    body: IntQueryOperatorInput
    bold: IntQueryOperatorInput
    heading: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultFontsFilterInput {
    body: StringQueryOperatorInput
    heading: StringQueryOperatorInput
    monospace: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultLineHeightsFilterInput {
    body: FloatQueryOperatorInput
    heading: FloatQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesAFilterInput {
    color: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesCodeFilterInput {
    fontFamily: StringQueryOperatorInput
    fontSize: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesFilterInput {
    a: SitePluginPluginOptionsPresetDefaultStylesAFilterInput
    code: SitePluginPluginOptionsPresetDefaultStylesCodeFilterInput
    h1: SitePluginPluginOptionsPresetDefaultStylesH1FilterInput
    h2: SitePluginPluginOptionsPresetDefaultStylesH2FilterInput
    h3: SitePluginPluginOptionsPresetDefaultStylesH3FilterInput
    h4: SitePluginPluginOptionsPresetDefaultStylesH4FilterInput
    h5: SitePluginPluginOptionsPresetDefaultStylesH5FilterInput
    h6: SitePluginPluginOptionsPresetDefaultStylesH6FilterInput
    img: SitePluginPluginOptionsPresetDefaultStylesImgFilterInput
    p: SitePluginPluginOptionsPresetDefaultStylesPFilterInput
    pre: SitePluginPluginOptionsPresetDefaultStylesPreFilterInput
    root: SitePluginPluginOptionsPresetDefaultStylesRootFilterInput
    table: SitePluginPluginOptionsPresetDefaultStylesTableFilterInput
    td: SitePluginPluginOptionsPresetDefaultStylesTdFilterInput
    th: SitePluginPluginOptionsPresetDefaultStylesThFilterInput
}

input SitePluginPluginOptionsPresetDefaultStylesH1FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesH2FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesH3FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesH4FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesH5FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesH6FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesImgFilterInput {
    maxWidth: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesPFilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesPreCodeFilterInput {
    color: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesPreFilterInput {
    code: SitePluginPluginOptionsPresetDefaultStylesPreCodeFilterInput
    fontFamily: StringQueryOperatorInput
    overflowX: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesRootFilterInput {
    fontFamily: StringQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesTableFilterInput {
    borderCollapse: StringQueryOperatorInput
    borderSpacing: IntQueryOperatorInput
    width: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesTdFilterInput {
    borderBottomStyle: StringQueryOperatorInput
    textAlign: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetDefaultStylesThFilterInput {
    borderBottomStyle: StringQueryOperatorInput
    textAlign: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFilterInput {
    default: SitePluginPluginOptionsPresetDefaultFilterInput
    funk: SitePluginPluginOptionsPresetFunkFilterInput
}

input SitePluginPluginOptionsPresetFunkColorsFilterInput {
    background: StringQueryOperatorInput
    muted: StringQueryOperatorInput
    primary: StringQueryOperatorInput
    secondary: StringQueryOperatorInput
    text: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkFilterInput {
    colors: SitePluginPluginOptionsPresetFunkColorsFilterInput
    fontSizes: IntQueryOperatorInput
    fontWeights: SitePluginPluginOptionsPresetFunkFontWeightsFilterInput
    fonts: SitePluginPluginOptionsPresetFunkFontsFilterInput
    lineHeights: SitePluginPluginOptionsPresetFunkLineHeightsFilterInput
    space: IntQueryOperatorInput
    styles: SitePluginPluginOptionsPresetFunkStylesFilterInput
}

input SitePluginPluginOptionsPresetFunkFontWeightsFilterInput {
    body: IntQueryOperatorInput
    bold: IntQueryOperatorInput
    heading: IntQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkFontsFilterInput {
    body: StringQueryOperatorInput
    heading: StringQueryOperatorInput
    monospace: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkLineHeightsFilterInput {
    body: FloatQueryOperatorInput
    heading: FloatQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesAFilterInput {
    color: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesCodeFilterInput {
    fontFamily: StringQueryOperatorInput
    fontSize: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesFilterInput {
    a: SitePluginPluginOptionsPresetFunkStylesAFilterInput
    code: SitePluginPluginOptionsPresetFunkStylesCodeFilterInput
    h1: SitePluginPluginOptionsPresetFunkStylesH1FilterInput
    h2: SitePluginPluginOptionsPresetFunkStylesH2FilterInput
    h3: SitePluginPluginOptionsPresetFunkStylesH3FilterInput
    h4: SitePluginPluginOptionsPresetFunkStylesH4FilterInput
    h5: SitePluginPluginOptionsPresetFunkStylesH5FilterInput
    h6: SitePluginPluginOptionsPresetFunkStylesH6FilterInput
    img: SitePluginPluginOptionsPresetFunkStylesImgFilterInput
    p: SitePluginPluginOptionsPresetFunkStylesPFilterInput
    pre: SitePluginPluginOptionsPresetFunkStylesPreFilterInput
    root: SitePluginPluginOptionsPresetFunkStylesRootFilterInput
    table: SitePluginPluginOptionsPresetFunkStylesTableFilterInput
    td: SitePluginPluginOptionsPresetFunkStylesTdFilterInput
    th: SitePluginPluginOptionsPresetFunkStylesThFilterInput
}

input SitePluginPluginOptionsPresetFunkStylesH1FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesH2FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesH3FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesH4FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesH5FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesH6FilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontSize: IntQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesImgFilterInput {
    maxWidth: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesPFilterInput {
    color: StringQueryOperatorInput
    fontFamily: StringQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesPreCodeFilterInput {
    color: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesPreFilterInput {
    code: SitePluginPluginOptionsPresetFunkStylesPreCodeFilterInput
    fontFamily: StringQueryOperatorInput
    overflowX: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesRootFilterInput {
    fontFamily: StringQueryOperatorInput
    fontWeight: StringQueryOperatorInput
    lineHeight: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesTableFilterInput {
    borderCollapse: StringQueryOperatorInput
    borderSpacing: IntQueryOperatorInput
    width: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesTdFilterInput {
    borderBottomStyle: StringQueryOperatorInput
    textAlign: StringQueryOperatorInput
}

input SitePluginPluginOptionsPresetFunkStylesThFilterInput {
    borderBottomStyle: StringQueryOperatorInput
    textAlign: StringQueryOperatorInput
}

input SitePluginSortInput {
    fields: [SitePluginFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
    author: StringQueryOperatorInput
    description: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input SiteSortInput {
    fields: [SiteFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StringQueryOperatorInput {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input ThemeUiConfigFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    preset: JSONQueryOperatorInput
    prismPreset: JSONQueryOperatorInput
}

input ThemeUiConfigSortInput {
    fields: [ThemeUiConfigFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input TransformOptions {
    cropFocus: ImageCropFocus = ATTENTION
    duotone: DuotoneGradient
    fit: ImageFit = COVER
    grayscale: Boolean = false
    rotate: Int = 0
    trim: Float = 0.0
}

input WebPOptions {
    quality: Int
}


"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for representation of dates using the Gregorian calendar."
scalar GraphCMS_Date

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar."
scalar GraphCMS_DateTime

scalar GraphCMS_Hex

"Raw JSON value"
scalar GraphCMS_Json

"The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar GraphCMS_Long

scalar GraphCMS_RGBAHue

scalar GraphCMS_RGBATransparency

"Slate-compatible RichText AST"
scalar GraphCMS_RichTextAST